//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.2-hudson-jaxb-ri-2.2-63- 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.02.02 at 04:16:20 PM NZDT 
//


package openadr.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for eiTargetType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="eiTargetType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/energyinterop/201110}groupID" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/energyinterop/201110}resourceID" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/energyinterop/201110}venID" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/energyinterop/201110}partyID" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "eiTargetType", propOrder = {
    "groupIDs",
    "resourceIDs",
    "venIDs",
    "partyIDs"
})
public class EiTarget implements Serializable, Equals2, HashCode2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "groupID")
    protected List<String> groupIDs;
    @XmlElement(name = "resourceID")
    protected List<String> resourceIDs;
    @XmlElement(name = "venID")
    protected List<String> venIDs;
    @XmlElement(name = "partyID")
    protected List<String> partyIDs;

    /**
     * Default no-arg constructor
     * 
     */
    public EiTarget() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public EiTarget(final List<String> groupIDs, final List<String> resourceIDs, final List<String> venIDs, final List<String> partyIDs) {
        this.groupIDs = groupIDs;
        this.resourceIDs = resourceIDs;
        this.venIDs = venIDs;
        this.partyIDs = partyIDs;
    }

    /**
     * Gets the value of the groupIDs property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the groupIDs property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGroupIDs().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getGroupIDs() {
        if (groupIDs == null) {
            groupIDs = new ArrayList<String>();
        }
        return this.groupIDs;
    }

    /**
     * Gets the value of the resourceIDs property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the resourceIDs property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getResourceIDs().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getResourceIDs() {
        if (resourceIDs == null) {
            resourceIDs = new ArrayList<String>();
        }
        return this.resourceIDs;
    }

    /**
     * Gets the value of the venIDs property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the venIDs property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVenIDs().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getVenIDs() {
        if (venIDs == null) {
            venIDs = new ArrayList<String>();
        }
        return this.venIDs;
    }

    /**
     * Gets the value of the partyIDs property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the partyIDs property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPartyIDs().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getPartyIDs() {
        if (partyIDs == null) {
            partyIDs = new ArrayList<String>();
        }
        return this.partyIDs;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            List<String> theGroupIDs;
            theGroupIDs = (((this.groupIDs!= null)&&(!this.groupIDs.isEmpty()))?this.getGroupIDs():null);
            strategy.appendField(locator, this, "groupIDs", buffer, theGroupIDs, ((this.groupIDs!= null)&&(!this.groupIDs.isEmpty())));
        }
        {
            List<String> theResourceIDs;
            theResourceIDs = (((this.resourceIDs!= null)&&(!this.resourceIDs.isEmpty()))?this.getResourceIDs():null);
            strategy.appendField(locator, this, "resourceIDs", buffer, theResourceIDs, ((this.resourceIDs!= null)&&(!this.resourceIDs.isEmpty())));
        }
        {
            List<String> theVenIDs;
            theVenIDs = (((this.venIDs!= null)&&(!this.venIDs.isEmpty()))?this.getVenIDs():null);
            strategy.appendField(locator, this, "venIDs", buffer, theVenIDs, ((this.venIDs!= null)&&(!this.venIDs.isEmpty())));
        }
        {
            List<String> thePartyIDs;
            thePartyIDs = (((this.partyIDs!= null)&&(!this.partyIDs.isEmpty()))?this.getPartyIDs():null);
            strategy.appendField(locator, this, "partyIDs", buffer, thePartyIDs, ((this.partyIDs!= null)&&(!this.partyIDs.isEmpty())));
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final EiTarget that = ((EiTarget) object);
        {
            List<String> lhsGroupIDs;
            lhsGroupIDs = (((this.groupIDs!= null)&&(!this.groupIDs.isEmpty()))?this.getGroupIDs():null);
            List<String> rhsGroupIDs;
            rhsGroupIDs = (((that.groupIDs!= null)&&(!that.groupIDs.isEmpty()))?that.getGroupIDs():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "groupIDs", lhsGroupIDs), LocatorUtils.property(thatLocator, "groupIDs", rhsGroupIDs), lhsGroupIDs, rhsGroupIDs, ((this.groupIDs!= null)&&(!this.groupIDs.isEmpty())), ((that.groupIDs!= null)&&(!that.groupIDs.isEmpty())))) {
                return false;
            }
        }
        {
            List<String> lhsResourceIDs;
            lhsResourceIDs = (((this.resourceIDs!= null)&&(!this.resourceIDs.isEmpty()))?this.getResourceIDs():null);
            List<String> rhsResourceIDs;
            rhsResourceIDs = (((that.resourceIDs!= null)&&(!that.resourceIDs.isEmpty()))?that.getResourceIDs():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resourceIDs", lhsResourceIDs), LocatorUtils.property(thatLocator, "resourceIDs", rhsResourceIDs), lhsResourceIDs, rhsResourceIDs, ((this.resourceIDs!= null)&&(!this.resourceIDs.isEmpty())), ((that.resourceIDs!= null)&&(!that.resourceIDs.isEmpty())))) {
                return false;
            }
        }
        {
            List<String> lhsVenIDs;
            lhsVenIDs = (((this.venIDs!= null)&&(!this.venIDs.isEmpty()))?this.getVenIDs():null);
            List<String> rhsVenIDs;
            rhsVenIDs = (((that.venIDs!= null)&&(!that.venIDs.isEmpty()))?that.getVenIDs():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "venIDs", lhsVenIDs), LocatorUtils.property(thatLocator, "venIDs", rhsVenIDs), lhsVenIDs, rhsVenIDs, ((this.venIDs!= null)&&(!this.venIDs.isEmpty())), ((that.venIDs!= null)&&(!that.venIDs.isEmpty())))) {
                return false;
            }
        }
        {
            List<String> lhsPartyIDs;
            lhsPartyIDs = (((this.partyIDs!= null)&&(!this.partyIDs.isEmpty()))?this.getPartyIDs():null);
            List<String> rhsPartyIDs;
            rhsPartyIDs = (((that.partyIDs!= null)&&(!that.partyIDs.isEmpty()))?that.getPartyIDs():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "partyIDs", lhsPartyIDs), LocatorUtils.property(thatLocator, "partyIDs", rhsPartyIDs), lhsPartyIDs, rhsPartyIDs, ((this.partyIDs!= null)&&(!this.partyIDs.isEmpty())), ((that.partyIDs!= null)&&(!that.partyIDs.isEmpty())))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            List<String> theGroupIDs;
            theGroupIDs = (((this.groupIDs!= null)&&(!this.groupIDs.isEmpty()))?this.getGroupIDs():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "groupIDs", theGroupIDs), currentHashCode, theGroupIDs, ((this.groupIDs!= null)&&(!this.groupIDs.isEmpty())));
        }
        {
            List<String> theResourceIDs;
            theResourceIDs = (((this.resourceIDs!= null)&&(!this.resourceIDs.isEmpty()))?this.getResourceIDs():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resourceIDs", theResourceIDs), currentHashCode, theResourceIDs, ((this.resourceIDs!= null)&&(!this.resourceIDs.isEmpty())));
        }
        {
            List<String> theVenIDs;
            theVenIDs = (((this.venIDs!= null)&&(!this.venIDs.isEmpty()))?this.getVenIDs():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "venIDs", theVenIDs), currentHashCode, theVenIDs, ((this.venIDs!= null)&&(!this.venIDs.isEmpty())));
        }
        {
            List<String> thePartyIDs;
            thePartyIDs = (((this.partyIDs!= null)&&(!this.partyIDs.isEmpty()))?this.getPartyIDs():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "partyIDs", thePartyIDs), currentHashCode, thePartyIDs, ((this.partyIDs!= null)&&(!this.partyIDs.isEmpty())));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public EiTarget withGroupIDs(String... values) {
        if (values!= null) {
            for (String value: values) {
                getGroupIDs().add(value);
            }
        }
        return this;
    }

    public EiTarget withGroupIDs(Collection<String> values) {
        if (values!= null) {
            getGroupIDs().addAll(values);
        }
        return this;
    }

    public EiTarget withResourceIDs(String... values) {
        if (values!= null) {
            for (String value: values) {
                getResourceIDs().add(value);
            }
        }
        return this;
    }

    public EiTarget withResourceIDs(Collection<String> values) {
        if (values!= null) {
            getResourceIDs().addAll(values);
        }
        return this;
    }

    public EiTarget withVenIDs(String... values) {
        if (values!= null) {
            for (String value: values) {
                getVenIDs().add(value);
            }
        }
        return this;
    }

    public EiTarget withVenIDs(Collection<String> values) {
        if (values!= null) {
            getVenIDs().addAll(values);
        }
        return this;
    }

    public EiTarget withPartyIDs(String... values) {
        if (values!= null) {
            for (String value: values) {
                getPartyIDs().add(value);
            }
        }
        return this;
    }

    public EiTarget withPartyIDs(Collection<String> values) {
        if (values!= null) {
            getPartyIDs().addAll(values);
        }
        return this;
    }

}
