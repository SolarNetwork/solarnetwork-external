//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.2-hudson-jaxb-ri-2.2-63- 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.02.02 at 02:58:26 PM NZDT 
//


package openadr.model.v20b.ei;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import openadr.model.v20b.emix.ServiceArea;
import openadr.model.v20b.power.AggregatedPnode;
import openadr.model.v20b.power.EndDeviceAsset;
import openadr.model.v20b.power.MeterAsset;
import openadr.model.v20b.power.Pnode;
import openadr.model.v20b.power.ServiceDeliveryPoint;
import openadr.model.v20b.power.ServiceLocation;
import openadr.model.v20b.power.TransportInterface;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for EiTargetType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="EiTargetType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/emix/2011/06/power}aggregatedPnode" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/emix/2011/06/power}endDeviceAsset" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/emix/2011/06/power}meterAsset" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/emix/2011/06/power}pnode" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/emix/2011/06}serviceArea" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/emix/2011/06/power}serviceDeliveryPoint" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/emix/2011/06/power}serviceLocation" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/emix/2011/06/power}transportInterface" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/energyinterop/201110}groupID" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/energyinterop/201110}groupName" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/energyinterop/201110}resourceID" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/energyinterop/201110}venID" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://docs.oasis-open.org/ns/energyinterop/201110}partyID" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "EiTargetType", propOrder = {
    "aggregatedPnodes",
    "endDeviceAssets",
    "meterAssets",
    "pnodes",
    "serviceAreas",
    "serviceDeliveryPoints",
    "serviceLocations",
    "transportInterfaces",
    "groupIDs",
    "groupNames",
    "resourceIDs",
    "venIDs",
    "partyIDs"
})
public class EiTarget implements Serializable, Equals2, HashCode2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "aggregatedPnode", namespace = "http://docs.oasis-open.org/ns/emix/2011/06/power")
    protected List<AggregatedPnode> aggregatedPnodes;
    @XmlElement(name = "endDeviceAsset", namespace = "http://docs.oasis-open.org/ns/emix/2011/06/power")
    protected List<EndDeviceAsset> endDeviceAssets;
    @XmlElement(name = "meterAsset", namespace = "http://docs.oasis-open.org/ns/emix/2011/06/power")
    protected List<MeterAsset> meterAssets;
    @XmlElement(name = "pnode", namespace = "http://docs.oasis-open.org/ns/emix/2011/06/power")
    protected List<Pnode> pnodes;
    @XmlElement(name = "serviceArea", namespace = "http://docs.oasis-open.org/ns/emix/2011/06")
    protected List<ServiceArea> serviceAreas;
    @XmlElement(name = "serviceDeliveryPoint", namespace = "http://docs.oasis-open.org/ns/emix/2011/06/power")
    protected List<ServiceDeliveryPoint> serviceDeliveryPoints;
    @XmlElement(name = "serviceLocation", namespace = "http://docs.oasis-open.org/ns/emix/2011/06/power")
    protected List<ServiceLocation> serviceLocations;
    @XmlElement(name = "transportInterface", namespace = "http://docs.oasis-open.org/ns/emix/2011/06/power")
    protected List<TransportInterface> transportInterfaces;
    @XmlElement(name = "groupID")
    protected List<String> groupIDs;
    @XmlElement(name = "groupName")
    protected List<String> groupNames;
    @XmlElement(name = "resourceID")
    protected List<String> resourceIDs;
    @XmlElement(name = "venID")
    protected List<String> venIDs;
    @XmlElement(name = "partyID")
    protected List<String> partyIDs;

    /**
     * Default no-arg constructor
     * 
     */
    public EiTarget() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public EiTarget(final List<AggregatedPnode> aggregatedPnodes, final List<EndDeviceAsset> endDeviceAssets, final List<MeterAsset> meterAssets, final List<Pnode> pnodes, final List<ServiceArea> serviceAreas, final List<ServiceDeliveryPoint> serviceDeliveryPoints, final List<ServiceLocation> serviceLocations, final List<TransportInterface> transportInterfaces, final List<String> groupIDs, final List<String> groupNames, final List<String> resourceIDs, final List<String> venIDs, final List<String> partyIDs) {
        this.aggregatedPnodes = aggregatedPnodes;
        this.endDeviceAssets = endDeviceAssets;
        this.meterAssets = meterAssets;
        this.pnodes = pnodes;
        this.serviceAreas = serviceAreas;
        this.serviceDeliveryPoints = serviceDeliveryPoints;
        this.serviceLocations = serviceLocations;
        this.transportInterfaces = transportInterfaces;
        this.groupIDs = groupIDs;
        this.groupNames = groupNames;
        this.resourceIDs = resourceIDs;
        this.venIDs = venIDs;
        this.partyIDs = partyIDs;
    }

    /**
     * Gets the value of the aggregatedPnodes property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the aggregatedPnodes property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAggregatedPnodes().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AggregatedPnode }
     * 
     * 
     */
    public List<AggregatedPnode> getAggregatedPnodes() {
        if (aggregatedPnodes == null) {
            aggregatedPnodes = new ArrayList<AggregatedPnode>();
        }
        return this.aggregatedPnodes;
    }

    /**
     * Gets the value of the endDeviceAssets property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the endDeviceAssets property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEndDeviceAssets().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EndDeviceAsset }
     * 
     * 
     */
    public List<EndDeviceAsset> getEndDeviceAssets() {
        if (endDeviceAssets == null) {
            endDeviceAssets = new ArrayList<EndDeviceAsset>();
        }
        return this.endDeviceAssets;
    }

    /**
     * Gets the value of the meterAssets property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the meterAssets property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMeterAssets().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MeterAsset }
     * 
     * 
     */
    public List<MeterAsset> getMeterAssets() {
        if (meterAssets == null) {
            meterAssets = new ArrayList<MeterAsset>();
        }
        return this.meterAssets;
    }

    /**
     * Gets the value of the pnodes property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the pnodes property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPnodes().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Pnode }
     * 
     * 
     */
    public List<Pnode> getPnodes() {
        if (pnodes == null) {
            pnodes = new ArrayList<Pnode>();
        }
        return this.pnodes;
    }

    /**
     * Gets the value of the serviceAreas property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the serviceAreas property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getServiceAreas().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ServiceArea }
     * 
     * 
     */
    public List<ServiceArea> getServiceAreas() {
        if (serviceAreas == null) {
            serviceAreas = new ArrayList<ServiceArea>();
        }
        return this.serviceAreas;
    }

    /**
     * Gets the value of the serviceDeliveryPoints property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the serviceDeliveryPoints property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getServiceDeliveryPoints().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ServiceDeliveryPoint }
     * 
     * 
     */
    public List<ServiceDeliveryPoint> getServiceDeliveryPoints() {
        if (serviceDeliveryPoints == null) {
            serviceDeliveryPoints = new ArrayList<ServiceDeliveryPoint>();
        }
        return this.serviceDeliveryPoints;
    }

    /**
     * Gets the value of the serviceLocations property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the serviceLocations property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getServiceLocations().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ServiceLocation }
     * 
     * 
     */
    public List<ServiceLocation> getServiceLocations() {
        if (serviceLocations == null) {
            serviceLocations = new ArrayList<ServiceLocation>();
        }
        return this.serviceLocations;
    }

    /**
     * Gets the value of the transportInterfaces property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the transportInterfaces property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTransportInterfaces().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TransportInterface }
     * 
     * 
     */
    public List<TransportInterface> getTransportInterfaces() {
        if (transportInterfaces == null) {
            transportInterfaces = new ArrayList<TransportInterface>();
        }
        return this.transportInterfaces;
    }

    /**
     * Gets the value of the groupIDs property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the groupIDs property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGroupIDs().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getGroupIDs() {
        if (groupIDs == null) {
            groupIDs = new ArrayList<String>();
        }
        return this.groupIDs;
    }

    /**
     * Gets the value of the groupNames property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the groupNames property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGroupNames().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getGroupNames() {
        if (groupNames == null) {
            groupNames = new ArrayList<String>();
        }
        return this.groupNames;
    }

    /**
     * Gets the value of the resourceIDs property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the resourceIDs property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getResourceIDs().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getResourceIDs() {
        if (resourceIDs == null) {
            resourceIDs = new ArrayList<String>();
        }
        return this.resourceIDs;
    }

    /**
     * Gets the value of the venIDs property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the venIDs property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVenIDs().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getVenIDs() {
        if (venIDs == null) {
            venIDs = new ArrayList<String>();
        }
        return this.venIDs;
    }

    /**
     * Gets the value of the partyIDs property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the partyIDs property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPartyIDs().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getPartyIDs() {
        if (partyIDs == null) {
            partyIDs = new ArrayList<String>();
        }
        return this.partyIDs;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            List<AggregatedPnode> theAggregatedPnodes;
            theAggregatedPnodes = (((this.aggregatedPnodes!= null)&&(!this.aggregatedPnodes.isEmpty()))?this.getAggregatedPnodes():null);
            strategy.appendField(locator, this, "aggregatedPnodes", buffer, theAggregatedPnodes, ((this.aggregatedPnodes!= null)&&(!this.aggregatedPnodes.isEmpty())));
        }
        {
            List<EndDeviceAsset> theEndDeviceAssets;
            theEndDeviceAssets = (((this.endDeviceAssets!= null)&&(!this.endDeviceAssets.isEmpty()))?this.getEndDeviceAssets():null);
            strategy.appendField(locator, this, "endDeviceAssets", buffer, theEndDeviceAssets, ((this.endDeviceAssets!= null)&&(!this.endDeviceAssets.isEmpty())));
        }
        {
            List<MeterAsset> theMeterAssets;
            theMeterAssets = (((this.meterAssets!= null)&&(!this.meterAssets.isEmpty()))?this.getMeterAssets():null);
            strategy.appendField(locator, this, "meterAssets", buffer, theMeterAssets, ((this.meterAssets!= null)&&(!this.meterAssets.isEmpty())));
        }
        {
            List<Pnode> thePnodes;
            thePnodes = (((this.pnodes!= null)&&(!this.pnodes.isEmpty()))?this.getPnodes():null);
            strategy.appendField(locator, this, "pnodes", buffer, thePnodes, ((this.pnodes!= null)&&(!this.pnodes.isEmpty())));
        }
        {
            List<ServiceArea> theServiceAreas;
            theServiceAreas = (((this.serviceAreas!= null)&&(!this.serviceAreas.isEmpty()))?this.getServiceAreas():null);
            strategy.appendField(locator, this, "serviceAreas", buffer, theServiceAreas, ((this.serviceAreas!= null)&&(!this.serviceAreas.isEmpty())));
        }
        {
            List<ServiceDeliveryPoint> theServiceDeliveryPoints;
            theServiceDeliveryPoints = (((this.serviceDeliveryPoints!= null)&&(!this.serviceDeliveryPoints.isEmpty()))?this.getServiceDeliveryPoints():null);
            strategy.appendField(locator, this, "serviceDeliveryPoints", buffer, theServiceDeliveryPoints, ((this.serviceDeliveryPoints!= null)&&(!this.serviceDeliveryPoints.isEmpty())));
        }
        {
            List<ServiceLocation> theServiceLocations;
            theServiceLocations = (((this.serviceLocations!= null)&&(!this.serviceLocations.isEmpty()))?this.getServiceLocations():null);
            strategy.appendField(locator, this, "serviceLocations", buffer, theServiceLocations, ((this.serviceLocations!= null)&&(!this.serviceLocations.isEmpty())));
        }
        {
            List<TransportInterface> theTransportInterfaces;
            theTransportInterfaces = (((this.transportInterfaces!= null)&&(!this.transportInterfaces.isEmpty()))?this.getTransportInterfaces():null);
            strategy.appendField(locator, this, "transportInterfaces", buffer, theTransportInterfaces, ((this.transportInterfaces!= null)&&(!this.transportInterfaces.isEmpty())));
        }
        {
            List<String> theGroupIDs;
            theGroupIDs = (((this.groupIDs!= null)&&(!this.groupIDs.isEmpty()))?this.getGroupIDs():null);
            strategy.appendField(locator, this, "groupIDs", buffer, theGroupIDs, ((this.groupIDs!= null)&&(!this.groupIDs.isEmpty())));
        }
        {
            List<String> theGroupNames;
            theGroupNames = (((this.groupNames!= null)&&(!this.groupNames.isEmpty()))?this.getGroupNames():null);
            strategy.appendField(locator, this, "groupNames", buffer, theGroupNames, ((this.groupNames!= null)&&(!this.groupNames.isEmpty())));
        }
        {
            List<String> theResourceIDs;
            theResourceIDs = (((this.resourceIDs!= null)&&(!this.resourceIDs.isEmpty()))?this.getResourceIDs():null);
            strategy.appendField(locator, this, "resourceIDs", buffer, theResourceIDs, ((this.resourceIDs!= null)&&(!this.resourceIDs.isEmpty())));
        }
        {
            List<String> theVenIDs;
            theVenIDs = (((this.venIDs!= null)&&(!this.venIDs.isEmpty()))?this.getVenIDs():null);
            strategy.appendField(locator, this, "venIDs", buffer, theVenIDs, ((this.venIDs!= null)&&(!this.venIDs.isEmpty())));
        }
        {
            List<String> thePartyIDs;
            thePartyIDs = (((this.partyIDs!= null)&&(!this.partyIDs.isEmpty()))?this.getPartyIDs():null);
            strategy.appendField(locator, this, "partyIDs", buffer, thePartyIDs, ((this.partyIDs!= null)&&(!this.partyIDs.isEmpty())));
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final EiTarget that = ((EiTarget) object);
        {
            List<AggregatedPnode> lhsAggregatedPnodes;
            lhsAggregatedPnodes = (((this.aggregatedPnodes!= null)&&(!this.aggregatedPnodes.isEmpty()))?this.getAggregatedPnodes():null);
            List<AggregatedPnode> rhsAggregatedPnodes;
            rhsAggregatedPnodes = (((that.aggregatedPnodes!= null)&&(!that.aggregatedPnodes.isEmpty()))?that.getAggregatedPnodes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "aggregatedPnodes", lhsAggregatedPnodes), LocatorUtils.property(thatLocator, "aggregatedPnodes", rhsAggregatedPnodes), lhsAggregatedPnodes, rhsAggregatedPnodes, ((this.aggregatedPnodes!= null)&&(!this.aggregatedPnodes.isEmpty())), ((that.aggregatedPnodes!= null)&&(!that.aggregatedPnodes.isEmpty())))) {
                return false;
            }
        }
        {
            List<EndDeviceAsset> lhsEndDeviceAssets;
            lhsEndDeviceAssets = (((this.endDeviceAssets!= null)&&(!this.endDeviceAssets.isEmpty()))?this.getEndDeviceAssets():null);
            List<EndDeviceAsset> rhsEndDeviceAssets;
            rhsEndDeviceAssets = (((that.endDeviceAssets!= null)&&(!that.endDeviceAssets.isEmpty()))?that.getEndDeviceAssets():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "endDeviceAssets", lhsEndDeviceAssets), LocatorUtils.property(thatLocator, "endDeviceAssets", rhsEndDeviceAssets), lhsEndDeviceAssets, rhsEndDeviceAssets, ((this.endDeviceAssets!= null)&&(!this.endDeviceAssets.isEmpty())), ((that.endDeviceAssets!= null)&&(!that.endDeviceAssets.isEmpty())))) {
                return false;
            }
        }
        {
            List<MeterAsset> lhsMeterAssets;
            lhsMeterAssets = (((this.meterAssets!= null)&&(!this.meterAssets.isEmpty()))?this.getMeterAssets():null);
            List<MeterAsset> rhsMeterAssets;
            rhsMeterAssets = (((that.meterAssets!= null)&&(!that.meterAssets.isEmpty()))?that.getMeterAssets():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "meterAssets", lhsMeterAssets), LocatorUtils.property(thatLocator, "meterAssets", rhsMeterAssets), lhsMeterAssets, rhsMeterAssets, ((this.meterAssets!= null)&&(!this.meterAssets.isEmpty())), ((that.meterAssets!= null)&&(!that.meterAssets.isEmpty())))) {
                return false;
            }
        }
        {
            List<Pnode> lhsPnodes;
            lhsPnodes = (((this.pnodes!= null)&&(!this.pnodes.isEmpty()))?this.getPnodes():null);
            List<Pnode> rhsPnodes;
            rhsPnodes = (((that.pnodes!= null)&&(!that.pnodes.isEmpty()))?that.getPnodes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pnodes", lhsPnodes), LocatorUtils.property(thatLocator, "pnodes", rhsPnodes), lhsPnodes, rhsPnodes, ((this.pnodes!= null)&&(!this.pnodes.isEmpty())), ((that.pnodes!= null)&&(!that.pnodes.isEmpty())))) {
                return false;
            }
        }
        {
            List<ServiceArea> lhsServiceAreas;
            lhsServiceAreas = (((this.serviceAreas!= null)&&(!this.serviceAreas.isEmpty()))?this.getServiceAreas():null);
            List<ServiceArea> rhsServiceAreas;
            rhsServiceAreas = (((that.serviceAreas!= null)&&(!that.serviceAreas.isEmpty()))?that.getServiceAreas():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "serviceAreas", lhsServiceAreas), LocatorUtils.property(thatLocator, "serviceAreas", rhsServiceAreas), lhsServiceAreas, rhsServiceAreas, ((this.serviceAreas!= null)&&(!this.serviceAreas.isEmpty())), ((that.serviceAreas!= null)&&(!that.serviceAreas.isEmpty())))) {
                return false;
            }
        }
        {
            List<ServiceDeliveryPoint> lhsServiceDeliveryPoints;
            lhsServiceDeliveryPoints = (((this.serviceDeliveryPoints!= null)&&(!this.serviceDeliveryPoints.isEmpty()))?this.getServiceDeliveryPoints():null);
            List<ServiceDeliveryPoint> rhsServiceDeliveryPoints;
            rhsServiceDeliveryPoints = (((that.serviceDeliveryPoints!= null)&&(!that.serviceDeliveryPoints.isEmpty()))?that.getServiceDeliveryPoints():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "serviceDeliveryPoints", lhsServiceDeliveryPoints), LocatorUtils.property(thatLocator, "serviceDeliveryPoints", rhsServiceDeliveryPoints), lhsServiceDeliveryPoints, rhsServiceDeliveryPoints, ((this.serviceDeliveryPoints!= null)&&(!this.serviceDeliveryPoints.isEmpty())), ((that.serviceDeliveryPoints!= null)&&(!that.serviceDeliveryPoints.isEmpty())))) {
                return false;
            }
        }
        {
            List<ServiceLocation> lhsServiceLocations;
            lhsServiceLocations = (((this.serviceLocations!= null)&&(!this.serviceLocations.isEmpty()))?this.getServiceLocations():null);
            List<ServiceLocation> rhsServiceLocations;
            rhsServiceLocations = (((that.serviceLocations!= null)&&(!that.serviceLocations.isEmpty()))?that.getServiceLocations():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "serviceLocations", lhsServiceLocations), LocatorUtils.property(thatLocator, "serviceLocations", rhsServiceLocations), lhsServiceLocations, rhsServiceLocations, ((this.serviceLocations!= null)&&(!this.serviceLocations.isEmpty())), ((that.serviceLocations!= null)&&(!that.serviceLocations.isEmpty())))) {
                return false;
            }
        }
        {
            List<TransportInterface> lhsTransportInterfaces;
            lhsTransportInterfaces = (((this.transportInterfaces!= null)&&(!this.transportInterfaces.isEmpty()))?this.getTransportInterfaces():null);
            List<TransportInterface> rhsTransportInterfaces;
            rhsTransportInterfaces = (((that.transportInterfaces!= null)&&(!that.transportInterfaces.isEmpty()))?that.getTransportInterfaces():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transportInterfaces", lhsTransportInterfaces), LocatorUtils.property(thatLocator, "transportInterfaces", rhsTransportInterfaces), lhsTransportInterfaces, rhsTransportInterfaces, ((this.transportInterfaces!= null)&&(!this.transportInterfaces.isEmpty())), ((that.transportInterfaces!= null)&&(!that.transportInterfaces.isEmpty())))) {
                return false;
            }
        }
        {
            List<String> lhsGroupIDs;
            lhsGroupIDs = (((this.groupIDs!= null)&&(!this.groupIDs.isEmpty()))?this.getGroupIDs():null);
            List<String> rhsGroupIDs;
            rhsGroupIDs = (((that.groupIDs!= null)&&(!that.groupIDs.isEmpty()))?that.getGroupIDs():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "groupIDs", lhsGroupIDs), LocatorUtils.property(thatLocator, "groupIDs", rhsGroupIDs), lhsGroupIDs, rhsGroupIDs, ((this.groupIDs!= null)&&(!this.groupIDs.isEmpty())), ((that.groupIDs!= null)&&(!that.groupIDs.isEmpty())))) {
                return false;
            }
        }
        {
            List<String> lhsGroupNames;
            lhsGroupNames = (((this.groupNames!= null)&&(!this.groupNames.isEmpty()))?this.getGroupNames():null);
            List<String> rhsGroupNames;
            rhsGroupNames = (((that.groupNames!= null)&&(!that.groupNames.isEmpty()))?that.getGroupNames():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "groupNames", lhsGroupNames), LocatorUtils.property(thatLocator, "groupNames", rhsGroupNames), lhsGroupNames, rhsGroupNames, ((this.groupNames!= null)&&(!this.groupNames.isEmpty())), ((that.groupNames!= null)&&(!that.groupNames.isEmpty())))) {
                return false;
            }
        }
        {
            List<String> lhsResourceIDs;
            lhsResourceIDs = (((this.resourceIDs!= null)&&(!this.resourceIDs.isEmpty()))?this.getResourceIDs():null);
            List<String> rhsResourceIDs;
            rhsResourceIDs = (((that.resourceIDs!= null)&&(!that.resourceIDs.isEmpty()))?that.getResourceIDs():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resourceIDs", lhsResourceIDs), LocatorUtils.property(thatLocator, "resourceIDs", rhsResourceIDs), lhsResourceIDs, rhsResourceIDs, ((this.resourceIDs!= null)&&(!this.resourceIDs.isEmpty())), ((that.resourceIDs!= null)&&(!that.resourceIDs.isEmpty())))) {
                return false;
            }
        }
        {
            List<String> lhsVenIDs;
            lhsVenIDs = (((this.venIDs!= null)&&(!this.venIDs.isEmpty()))?this.getVenIDs():null);
            List<String> rhsVenIDs;
            rhsVenIDs = (((that.venIDs!= null)&&(!that.venIDs.isEmpty()))?that.getVenIDs():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "venIDs", lhsVenIDs), LocatorUtils.property(thatLocator, "venIDs", rhsVenIDs), lhsVenIDs, rhsVenIDs, ((this.venIDs!= null)&&(!this.venIDs.isEmpty())), ((that.venIDs!= null)&&(!that.venIDs.isEmpty())))) {
                return false;
            }
        }
        {
            List<String> lhsPartyIDs;
            lhsPartyIDs = (((this.partyIDs!= null)&&(!this.partyIDs.isEmpty()))?this.getPartyIDs():null);
            List<String> rhsPartyIDs;
            rhsPartyIDs = (((that.partyIDs!= null)&&(!that.partyIDs.isEmpty()))?that.getPartyIDs():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "partyIDs", lhsPartyIDs), LocatorUtils.property(thatLocator, "partyIDs", rhsPartyIDs), lhsPartyIDs, rhsPartyIDs, ((this.partyIDs!= null)&&(!this.partyIDs.isEmpty())), ((that.partyIDs!= null)&&(!that.partyIDs.isEmpty())))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            List<AggregatedPnode> theAggregatedPnodes;
            theAggregatedPnodes = (((this.aggregatedPnodes!= null)&&(!this.aggregatedPnodes.isEmpty()))?this.getAggregatedPnodes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "aggregatedPnodes", theAggregatedPnodes), currentHashCode, theAggregatedPnodes, ((this.aggregatedPnodes!= null)&&(!this.aggregatedPnodes.isEmpty())));
        }
        {
            List<EndDeviceAsset> theEndDeviceAssets;
            theEndDeviceAssets = (((this.endDeviceAssets!= null)&&(!this.endDeviceAssets.isEmpty()))?this.getEndDeviceAssets():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "endDeviceAssets", theEndDeviceAssets), currentHashCode, theEndDeviceAssets, ((this.endDeviceAssets!= null)&&(!this.endDeviceAssets.isEmpty())));
        }
        {
            List<MeterAsset> theMeterAssets;
            theMeterAssets = (((this.meterAssets!= null)&&(!this.meterAssets.isEmpty()))?this.getMeterAssets():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "meterAssets", theMeterAssets), currentHashCode, theMeterAssets, ((this.meterAssets!= null)&&(!this.meterAssets.isEmpty())));
        }
        {
            List<Pnode> thePnodes;
            thePnodes = (((this.pnodes!= null)&&(!this.pnodes.isEmpty()))?this.getPnodes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pnodes", thePnodes), currentHashCode, thePnodes, ((this.pnodes!= null)&&(!this.pnodes.isEmpty())));
        }
        {
            List<ServiceArea> theServiceAreas;
            theServiceAreas = (((this.serviceAreas!= null)&&(!this.serviceAreas.isEmpty()))?this.getServiceAreas():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "serviceAreas", theServiceAreas), currentHashCode, theServiceAreas, ((this.serviceAreas!= null)&&(!this.serviceAreas.isEmpty())));
        }
        {
            List<ServiceDeliveryPoint> theServiceDeliveryPoints;
            theServiceDeliveryPoints = (((this.serviceDeliveryPoints!= null)&&(!this.serviceDeliveryPoints.isEmpty()))?this.getServiceDeliveryPoints():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "serviceDeliveryPoints", theServiceDeliveryPoints), currentHashCode, theServiceDeliveryPoints, ((this.serviceDeliveryPoints!= null)&&(!this.serviceDeliveryPoints.isEmpty())));
        }
        {
            List<ServiceLocation> theServiceLocations;
            theServiceLocations = (((this.serviceLocations!= null)&&(!this.serviceLocations.isEmpty()))?this.getServiceLocations():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "serviceLocations", theServiceLocations), currentHashCode, theServiceLocations, ((this.serviceLocations!= null)&&(!this.serviceLocations.isEmpty())));
        }
        {
            List<TransportInterface> theTransportInterfaces;
            theTransportInterfaces = (((this.transportInterfaces!= null)&&(!this.transportInterfaces.isEmpty()))?this.getTransportInterfaces():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transportInterfaces", theTransportInterfaces), currentHashCode, theTransportInterfaces, ((this.transportInterfaces!= null)&&(!this.transportInterfaces.isEmpty())));
        }
        {
            List<String> theGroupIDs;
            theGroupIDs = (((this.groupIDs!= null)&&(!this.groupIDs.isEmpty()))?this.getGroupIDs():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "groupIDs", theGroupIDs), currentHashCode, theGroupIDs, ((this.groupIDs!= null)&&(!this.groupIDs.isEmpty())));
        }
        {
            List<String> theGroupNames;
            theGroupNames = (((this.groupNames!= null)&&(!this.groupNames.isEmpty()))?this.getGroupNames():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "groupNames", theGroupNames), currentHashCode, theGroupNames, ((this.groupNames!= null)&&(!this.groupNames.isEmpty())));
        }
        {
            List<String> theResourceIDs;
            theResourceIDs = (((this.resourceIDs!= null)&&(!this.resourceIDs.isEmpty()))?this.getResourceIDs():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resourceIDs", theResourceIDs), currentHashCode, theResourceIDs, ((this.resourceIDs!= null)&&(!this.resourceIDs.isEmpty())));
        }
        {
            List<String> theVenIDs;
            theVenIDs = (((this.venIDs!= null)&&(!this.venIDs.isEmpty()))?this.getVenIDs():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "venIDs", theVenIDs), currentHashCode, theVenIDs, ((this.venIDs!= null)&&(!this.venIDs.isEmpty())));
        }
        {
            List<String> thePartyIDs;
            thePartyIDs = (((this.partyIDs!= null)&&(!this.partyIDs.isEmpty()))?this.getPartyIDs():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "partyIDs", thePartyIDs), currentHashCode, thePartyIDs, ((this.partyIDs!= null)&&(!this.partyIDs.isEmpty())));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public EiTarget withAggregatedPnodes(AggregatedPnode... values) {
        if (values!= null) {
            for (AggregatedPnode value: values) {
                getAggregatedPnodes().add(value);
            }
        }
        return this;
    }

    public EiTarget withAggregatedPnodes(Collection<AggregatedPnode> values) {
        if (values!= null) {
            getAggregatedPnodes().addAll(values);
        }
        return this;
    }

    public EiTarget withEndDeviceAssets(EndDeviceAsset... values) {
        if (values!= null) {
            for (EndDeviceAsset value: values) {
                getEndDeviceAssets().add(value);
            }
        }
        return this;
    }

    public EiTarget withEndDeviceAssets(Collection<EndDeviceAsset> values) {
        if (values!= null) {
            getEndDeviceAssets().addAll(values);
        }
        return this;
    }

    public EiTarget withMeterAssets(MeterAsset... values) {
        if (values!= null) {
            for (MeterAsset value: values) {
                getMeterAssets().add(value);
            }
        }
        return this;
    }

    public EiTarget withMeterAssets(Collection<MeterAsset> values) {
        if (values!= null) {
            getMeterAssets().addAll(values);
        }
        return this;
    }

    public EiTarget withPnodes(Pnode... values) {
        if (values!= null) {
            for (Pnode value: values) {
                getPnodes().add(value);
            }
        }
        return this;
    }

    public EiTarget withPnodes(Collection<Pnode> values) {
        if (values!= null) {
            getPnodes().addAll(values);
        }
        return this;
    }

    public EiTarget withServiceAreas(ServiceArea... values) {
        if (values!= null) {
            for (ServiceArea value: values) {
                getServiceAreas().add(value);
            }
        }
        return this;
    }

    public EiTarget withServiceAreas(Collection<ServiceArea> values) {
        if (values!= null) {
            getServiceAreas().addAll(values);
        }
        return this;
    }

    public EiTarget withServiceDeliveryPoints(ServiceDeliveryPoint... values) {
        if (values!= null) {
            for (ServiceDeliveryPoint value: values) {
                getServiceDeliveryPoints().add(value);
            }
        }
        return this;
    }

    public EiTarget withServiceDeliveryPoints(Collection<ServiceDeliveryPoint> values) {
        if (values!= null) {
            getServiceDeliveryPoints().addAll(values);
        }
        return this;
    }

    public EiTarget withServiceLocations(ServiceLocation... values) {
        if (values!= null) {
            for (ServiceLocation value: values) {
                getServiceLocations().add(value);
            }
        }
        return this;
    }

    public EiTarget withServiceLocations(Collection<ServiceLocation> values) {
        if (values!= null) {
            getServiceLocations().addAll(values);
        }
        return this;
    }

    public EiTarget withTransportInterfaces(TransportInterface... values) {
        if (values!= null) {
            for (TransportInterface value: values) {
                getTransportInterfaces().add(value);
            }
        }
        return this;
    }

    public EiTarget withTransportInterfaces(Collection<TransportInterface> values) {
        if (values!= null) {
            getTransportInterfaces().addAll(values);
        }
        return this;
    }

    public EiTarget withGroupIDs(String... values) {
        if (values!= null) {
            for (String value: values) {
                getGroupIDs().add(value);
            }
        }
        return this;
    }

    public EiTarget withGroupIDs(Collection<String> values) {
        if (values!= null) {
            getGroupIDs().addAll(values);
        }
        return this;
    }

    public EiTarget withGroupNames(String... values) {
        if (values!= null) {
            for (String value: values) {
                getGroupNames().add(value);
            }
        }
        return this;
    }

    public EiTarget withGroupNames(Collection<String> values) {
        if (values!= null) {
            getGroupNames().addAll(values);
        }
        return this;
    }

    public EiTarget withResourceIDs(String... values) {
        if (values!= null) {
            for (String value: values) {
                getResourceIDs().add(value);
            }
        }
        return this;
    }

    public EiTarget withResourceIDs(Collection<String> values) {
        if (values!= null) {
            getResourceIDs().addAll(values);
        }
        return this;
    }

    public EiTarget withVenIDs(String... values) {
        if (values!= null) {
            for (String value: values) {
                getVenIDs().add(value);
            }
        }
        return this;
    }

    public EiTarget withVenIDs(Collection<String> values) {
        if (values!= null) {
            getVenIDs().addAll(values);
        }
        return this;
    }

    public EiTarget withPartyIDs(String... values) {
        if (values!= null) {
            for (String value: values) {
                getPartyIDs().add(value);
            }
        }
        return this;
    }

    public EiTarget withPartyIDs(Collection<String> values) {
        if (values!= null) {
            getPartyIDs().addAll(values);
        }
        return this;
    }

}
