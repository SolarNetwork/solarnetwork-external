//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.2-hudson-jaxb-ri-2.2-63- 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.02.02 at 02:58:26 PM NZDT 
//


package openadr.model.v20b.ei;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlType;
import openadr.model.v20b.OadrGBStreamPayloadBase;
import openadr.model.v20b.OadrReportPayloadType;
import openadr.model.v20b.strm.StreamPayloadBase;
import openadr.model.v20b.xcal.Dtstart;
import openadr.model.v20b.xcal.DurationPropType;
import openadr.model.v20b.xcal.Uid;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for IntervalType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="IntervalType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{urn:ietf:params:xml:ns:icalendar-2.0}dtstart" minOccurs="0"/>
 *         &lt;element ref="{urn:ietf:params:xml:ns:icalendar-2.0}duration" minOccurs="0"/>
 *         &lt;element ref="{urn:ietf:params:xml:ns:icalendar-2.0}uid" minOccurs="0"/>
 *         &lt;element ref="{urn:ietf:params:xml:ns:icalendar-2.0:stream}streamPayloadBase" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "IntervalType", propOrder = {
    "dtstart",
    "duration",
    "uid",
    "streamPayloadBases"
})
public class Interval implements Serializable, Equals2, HashCode2, ToString2
{

    private final static long serialVersionUID = 1L;
    @XmlElement(namespace = "urn:ietf:params:xml:ns:icalendar-2.0")
    protected Dtstart dtstart;
    @XmlElement(namespace = "urn:ietf:params:xml:ns:icalendar-2.0")
    protected DurationPropType duration;
    @XmlElement(namespace = "urn:ietf:params:xml:ns:icalendar-2.0")
    protected Uid uid;
    @XmlElementRef(name = "streamPayloadBase", namespace = "urn:ietf:params:xml:ns:icalendar-2.0:stream", type = JAXBElement.class)
    protected List<JAXBElement<? extends StreamPayloadBase>> streamPayloadBases;

    /**
     * Default no-arg constructor
     * 
     */
    public Interval() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public Interval(final Dtstart dtstart, final DurationPropType duration, final Uid uid, final List<JAXBElement<? extends StreamPayloadBase>> streamPayloadBases) {
        this.dtstart = dtstart;
        this.duration = duration;
        this.uid = uid;
        this.streamPayloadBases = streamPayloadBases;
    }

    /**
     * Gets the value of the dtstart property.
     * 
     * @return
     *     possible object is
     *     {@link Dtstart }
     *     
     */
    public Dtstart getDtstart() {
        return dtstart;
    }

    /**
     * Sets the value of the dtstart property.
     * 
     * @param value
     *     allowed object is
     *     {@link Dtstart }
     *     
     */
    public void setDtstart(Dtstart value) {
        this.dtstart = value;
    }

    /**
     * Gets the value of the duration property.
     * 
     * @return
     *     possible object is
     *     {@link DurationPropType }
     *     
     */
    public DurationPropType getDuration() {
        return duration;
    }

    /**
     * Sets the value of the duration property.
     * 
     * @param value
     *     allowed object is
     *     {@link DurationPropType }
     *     
     */
    public void setDuration(DurationPropType value) {
        this.duration = value;
    }

    /**
     * Gets the value of the uid property.
     * 
     * @return
     *     possible object is
     *     {@link Uid }
     *     
     */
    public Uid getUid() {
        return uid;
    }

    /**
     * Sets the value of the uid property.
     * 
     * @param value
     *     allowed object is
     *     {@link Uid }
     *     
     */
    public void setUid(Uid value) {
        this.uid = value;
    }

    /**
     * Gets the value of the streamPayloadBases property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the streamPayloadBases property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getStreamPayloadBases().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link SignalPayload }{@code >}
     * {@link JAXBElement }{@code <}{@link StreamPayloadBase }{@code >}
     * {@link JAXBElement }{@code <}{@link OadrGBStreamPayloadBase }{@code >}
     * {@link JAXBElement }{@code <}{@link OadrReportPayloadType }{@code >}
     * 
     * 
     */
    public List<JAXBElement<? extends StreamPayloadBase>> getStreamPayloadBases() {
        if (streamPayloadBases == null) {
            streamPayloadBases = new ArrayList<JAXBElement<? extends StreamPayloadBase>>();
        }
        return this.streamPayloadBases;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            Dtstart theDtstart;
            theDtstart = this.getDtstart();
            strategy.appendField(locator, this, "dtstart", buffer, theDtstart, (this.dtstart!= null));
        }
        {
            DurationPropType theDuration;
            theDuration = this.getDuration();
            strategy.appendField(locator, this, "duration", buffer, theDuration, (this.duration!= null));
        }
        {
            Uid theUid;
            theUid = this.getUid();
            strategy.appendField(locator, this, "uid", buffer, theUid, (this.uid!= null));
        }
        {
            List<JAXBElement<? extends StreamPayloadBase>> theStreamPayloadBases;
            theStreamPayloadBases = (((this.streamPayloadBases!= null)&&(!this.streamPayloadBases.isEmpty()))?this.getStreamPayloadBases():null);
            strategy.appendField(locator, this, "streamPayloadBases", buffer, theStreamPayloadBases, ((this.streamPayloadBases!= null)&&(!this.streamPayloadBases.isEmpty())));
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Interval that = ((Interval) object);
        {
            Dtstart lhsDtstart;
            lhsDtstart = this.getDtstart();
            Dtstart rhsDtstart;
            rhsDtstart = that.getDtstart();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dtstart", lhsDtstart), LocatorUtils.property(thatLocator, "dtstart", rhsDtstart), lhsDtstart, rhsDtstart, (this.dtstart!= null), (that.dtstart!= null))) {
                return false;
            }
        }
        {
            DurationPropType lhsDuration;
            lhsDuration = this.getDuration();
            DurationPropType rhsDuration;
            rhsDuration = that.getDuration();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "duration", lhsDuration), LocatorUtils.property(thatLocator, "duration", rhsDuration), lhsDuration, rhsDuration, (this.duration!= null), (that.duration!= null))) {
                return false;
            }
        }
        {
            Uid lhsUid;
            lhsUid = this.getUid();
            Uid rhsUid;
            rhsUid = that.getUid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "uid", lhsUid), LocatorUtils.property(thatLocator, "uid", rhsUid), lhsUid, rhsUid, (this.uid!= null), (that.uid!= null))) {
                return false;
            }
        }
        {
            List<JAXBElement<? extends StreamPayloadBase>> lhsStreamPayloadBases;
            lhsStreamPayloadBases = (((this.streamPayloadBases!= null)&&(!this.streamPayloadBases.isEmpty()))?this.getStreamPayloadBases():null);
            List<JAXBElement<? extends StreamPayloadBase>> rhsStreamPayloadBases;
            rhsStreamPayloadBases = (((that.streamPayloadBases!= null)&&(!that.streamPayloadBases.isEmpty()))?that.getStreamPayloadBases():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "streamPayloadBases", lhsStreamPayloadBases), LocatorUtils.property(thatLocator, "streamPayloadBases", rhsStreamPayloadBases), lhsStreamPayloadBases, rhsStreamPayloadBases, ((this.streamPayloadBases!= null)&&(!this.streamPayloadBases.isEmpty())), ((that.streamPayloadBases!= null)&&(!that.streamPayloadBases.isEmpty())))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            Dtstart theDtstart;
            theDtstart = this.getDtstart();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dtstart", theDtstart), currentHashCode, theDtstart, (this.dtstart!= null));
        }
        {
            DurationPropType theDuration;
            theDuration = this.getDuration();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "duration", theDuration), currentHashCode, theDuration, (this.duration!= null));
        }
        {
            Uid theUid;
            theUid = this.getUid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uid", theUid), currentHashCode, theUid, (this.uid!= null));
        }
        {
            List<JAXBElement<? extends StreamPayloadBase>> theStreamPayloadBases;
            theStreamPayloadBases = (((this.streamPayloadBases!= null)&&(!this.streamPayloadBases.isEmpty()))?this.getStreamPayloadBases():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "streamPayloadBases", theStreamPayloadBases), currentHashCode, theStreamPayloadBases, ((this.streamPayloadBases!= null)&&(!this.streamPayloadBases.isEmpty())));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Interval withDtstart(Dtstart value) {
        setDtstart(value);
        return this;
    }

    public Interval withDuration(DurationPropType value) {
        setDuration(value);
        return this;
    }

    public Interval withUid(Uid value) {
        setUid(value);
        return this;
    }

    public Interval withStreamPayloadBases(JAXBElement<? extends StreamPayloadBase> ... values) {
        if (values!= null) {
            for (JAXBElement<? extends StreamPayloadBase> value: values) {
                getStreamPayloadBases().add(value);
            }
        }
        return this;
    }

    public Interval withStreamPayloadBases(Collection<JAXBElement<? extends StreamPayloadBase>> values) {
        if (values!= null) {
            getStreamPayloadBases().addAll(values);
        }
        return this;
    }

}
