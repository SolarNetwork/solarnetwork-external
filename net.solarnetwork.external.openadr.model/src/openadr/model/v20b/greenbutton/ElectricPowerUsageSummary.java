//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.2-hudson-jaxb-ri-2.2-63- 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.02.02 at 02:58:26 PM NZDT 
//


package openadr.model.v20b.greenbutton;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Summary of usage for a billing period
 * 
 * <p>Java class for ElectricPowerUsageSummary complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ElectricPowerUsageSummary">
 *   &lt;complexContent>
 *     &lt;extension base="{http://naesb.org/espi}IdentifiedObject">
 *       &lt;sequence>
 *         &lt;element name="billingPeriod" type="{http://naesb.org/espi}DateTimeInterval" minOccurs="0"/>
 *         &lt;element name="billLastPeriod" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *         &lt;element name="billToDate" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *         &lt;element name="costAdditionalLastPeriod" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *         &lt;element name="costAdditionalDetailLastPeriod" type="{http://naesb.org/espi}LineItem" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="currency" type="{http://naesb.org/espi}Currency" minOccurs="0"/>
 *         &lt;element name="overallConsumptionLastPeriod" type="{http://naesb.org/espi}SummaryMeasurement" minOccurs="0"/>
 *         &lt;element name="currentBillingPeriodOverAllConsumption" type="{http://naesb.org/espi}SummaryMeasurement" minOccurs="0"/>
 *         &lt;element name="currentDayLastYearNetConsumption" type="{http://naesb.org/espi}SummaryMeasurement" minOccurs="0"/>
 *         &lt;element name="currentDayNetConsumption" type="{http://naesb.org/espi}SummaryMeasurement" minOccurs="0"/>
 *         &lt;element name="currentDayOverallConsumption" type="{http://naesb.org/espi}SummaryMeasurement" minOccurs="0"/>
 *         &lt;element name="peakDemand" type="{http://naesb.org/espi}SummaryMeasurement" minOccurs="0"/>
 *         &lt;element name="previousDayLastYearOverallConsumption" type="{http://naesb.org/espi}SummaryMeasurement" minOccurs="0"/>
 *         &lt;element name="previousDayNetConsumption" type="{http://naesb.org/espi}SummaryMeasurement" minOccurs="0"/>
 *         &lt;element name="previousDayOverallConsumption" type="{http://naesb.org/espi}SummaryMeasurement" minOccurs="0"/>
 *         &lt;element name="qualityOfReading" type="{http://naesb.org/espi}QualityOfReading" minOccurs="0"/>
 *         &lt;element name="ratchetDemand" type="{http://naesb.org/espi}SummaryMeasurement" minOccurs="0"/>
 *         &lt;element name="ratchetDemandPeriod" type="{http://naesb.org/espi}DateTimeInterval" minOccurs="0"/>
 *         &lt;element name="statusTimeStamp" type="{http://naesb.org/espi}TimeType"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ElectricPowerUsageSummary", propOrder = {
    "billingPeriod",
    "billLastPeriod",
    "billToDate",
    "costAdditionalLastPeriod",
    "costAdditionalDetailLastPeriods",
    "currency",
    "overallConsumptionLastPeriod",
    "currentBillingPeriodOverAllConsumption",
    "currentDayLastYearNetConsumption",
    "currentDayNetConsumption",
    "currentDayOverallConsumption",
    "peakDemand",
    "previousDayLastYearOverallConsumption",
    "previousDayNetConsumption",
    "previousDayOverallConsumption",
    "qualityOfReading",
    "ratchetDemand",
    "ratchetDemandPeriod",
    "statusTimeStamp"
})
@XmlRootElement(name = "ElectricPowerUsageSummary")
public class ElectricPowerUsageSummary
    extends IdentifiedObject
    implements Serializable, Equals2, HashCode2, ToString2
{

    private final static long serialVersionUID = 1L;
    protected DateTimeInterval billingPeriod;
    protected Long billLastPeriod;
    protected Long billToDate;
    protected Long costAdditionalLastPeriod;
    @XmlElement(name = "costAdditionalDetailLastPeriod")
    protected List<LineItem> costAdditionalDetailLastPeriods;
    protected String currency;
    protected SummaryMeasurement overallConsumptionLastPeriod;
    protected SummaryMeasurement currentBillingPeriodOverAllConsumption;
    protected SummaryMeasurement currentDayLastYearNetConsumption;
    protected SummaryMeasurement currentDayNetConsumption;
    protected SummaryMeasurement currentDayOverallConsumption;
    protected SummaryMeasurement peakDemand;
    protected SummaryMeasurement previousDayLastYearOverallConsumption;
    protected SummaryMeasurement previousDayNetConsumption;
    protected SummaryMeasurement previousDayOverallConsumption;
    protected String qualityOfReading;
    protected SummaryMeasurement ratchetDemand;
    protected DateTimeInterval ratchetDemandPeriod;
    protected long statusTimeStamp;

    /**
     * Default no-arg constructor
     * 
     */
    public ElectricPowerUsageSummary() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public ElectricPowerUsageSummary(final List<java.lang.Object> extensions, final BatchItemInfo batchItemInfo, final DateTimeInterval billingPeriod, final Long billLastPeriod, final Long billToDate, final Long costAdditionalLastPeriod, final List<LineItem> costAdditionalDetailLastPeriods, final String currency, final SummaryMeasurement overallConsumptionLastPeriod, final SummaryMeasurement currentBillingPeriodOverAllConsumption, final SummaryMeasurement currentDayLastYearNetConsumption, final SummaryMeasurement currentDayNetConsumption, final SummaryMeasurement currentDayOverallConsumption, final SummaryMeasurement peakDemand, final SummaryMeasurement previousDayLastYearOverallConsumption, final SummaryMeasurement previousDayNetConsumption, final SummaryMeasurement previousDayOverallConsumption, final String qualityOfReading, final SummaryMeasurement ratchetDemand, final DateTimeInterval ratchetDemandPeriod, final long statusTimeStamp) {
        super(extensions, batchItemInfo);
        this.billingPeriod = billingPeriod;
        this.billLastPeriod = billLastPeriod;
        this.billToDate = billToDate;
        this.costAdditionalLastPeriod = costAdditionalLastPeriod;
        this.costAdditionalDetailLastPeriods = costAdditionalDetailLastPeriods;
        this.currency = currency;
        this.overallConsumptionLastPeriod = overallConsumptionLastPeriod;
        this.currentBillingPeriodOverAllConsumption = currentBillingPeriodOverAllConsumption;
        this.currentDayLastYearNetConsumption = currentDayLastYearNetConsumption;
        this.currentDayNetConsumption = currentDayNetConsumption;
        this.currentDayOverallConsumption = currentDayOverallConsumption;
        this.peakDemand = peakDemand;
        this.previousDayLastYearOverallConsumption = previousDayLastYearOverallConsumption;
        this.previousDayNetConsumption = previousDayNetConsumption;
        this.previousDayOverallConsumption = previousDayOverallConsumption;
        this.qualityOfReading = qualityOfReading;
        this.ratchetDemand = ratchetDemand;
        this.ratchetDemandPeriod = ratchetDemandPeriod;
        this.statusTimeStamp = statusTimeStamp;
    }

    /**
     * Gets the value of the billingPeriod property.
     * 
     * @return
     *     possible object is
     *     {@link DateTimeInterval }
     *     
     */
    public DateTimeInterval getBillingPeriod() {
        return billingPeriod;
    }

    /**
     * Sets the value of the billingPeriod property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTimeInterval }
     *     
     */
    public void setBillingPeriod(DateTimeInterval value) {
        this.billingPeriod = value;
    }

    /**
     * Gets the value of the billLastPeriod property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getBillLastPeriod() {
        return billLastPeriod;
    }

    /**
     * Sets the value of the billLastPeriod property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setBillLastPeriod(Long value) {
        this.billLastPeriod = value;
    }

    /**
     * Gets the value of the billToDate property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getBillToDate() {
        return billToDate;
    }

    /**
     * Sets the value of the billToDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setBillToDate(Long value) {
        this.billToDate = value;
    }

    /**
     * Gets the value of the costAdditionalLastPeriod property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getCostAdditionalLastPeriod() {
        return costAdditionalLastPeriod;
    }

    /**
     * Sets the value of the costAdditionalLastPeriod property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setCostAdditionalLastPeriod(Long value) {
        this.costAdditionalLastPeriod = value;
    }

    /**
     * Gets the value of the costAdditionalDetailLastPeriods property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the costAdditionalDetailLastPeriods property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCostAdditionalDetailLastPeriods().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LineItem }
     * 
     * 
     */
    public List<LineItem> getCostAdditionalDetailLastPeriods() {
        if (costAdditionalDetailLastPeriods == null) {
            costAdditionalDetailLastPeriods = new ArrayList<LineItem>();
        }
        return this.costAdditionalDetailLastPeriods;
    }

    /**
     * Gets the value of the currency property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCurrency() {
        return currency;
    }

    /**
     * Sets the value of the currency property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCurrency(String value) {
        this.currency = value;
    }

    /**
     * Gets the value of the overallConsumptionLastPeriod property.
     * 
     * @return
     *     possible object is
     *     {@link SummaryMeasurement }
     *     
     */
    public SummaryMeasurement getOverallConsumptionLastPeriod() {
        return overallConsumptionLastPeriod;
    }

    /**
     * Sets the value of the overallConsumptionLastPeriod property.
     * 
     * @param value
     *     allowed object is
     *     {@link SummaryMeasurement }
     *     
     */
    public void setOverallConsumptionLastPeriod(SummaryMeasurement value) {
        this.overallConsumptionLastPeriod = value;
    }

    /**
     * Gets the value of the currentBillingPeriodOverAllConsumption property.
     * 
     * @return
     *     possible object is
     *     {@link SummaryMeasurement }
     *     
     */
    public SummaryMeasurement getCurrentBillingPeriodOverAllConsumption() {
        return currentBillingPeriodOverAllConsumption;
    }

    /**
     * Sets the value of the currentBillingPeriodOverAllConsumption property.
     * 
     * @param value
     *     allowed object is
     *     {@link SummaryMeasurement }
     *     
     */
    public void setCurrentBillingPeriodOverAllConsumption(SummaryMeasurement value) {
        this.currentBillingPeriodOverAllConsumption = value;
    }

    /**
     * Gets the value of the currentDayLastYearNetConsumption property.
     * 
     * @return
     *     possible object is
     *     {@link SummaryMeasurement }
     *     
     */
    public SummaryMeasurement getCurrentDayLastYearNetConsumption() {
        return currentDayLastYearNetConsumption;
    }

    /**
     * Sets the value of the currentDayLastYearNetConsumption property.
     * 
     * @param value
     *     allowed object is
     *     {@link SummaryMeasurement }
     *     
     */
    public void setCurrentDayLastYearNetConsumption(SummaryMeasurement value) {
        this.currentDayLastYearNetConsumption = value;
    }

    /**
     * Gets the value of the currentDayNetConsumption property.
     * 
     * @return
     *     possible object is
     *     {@link SummaryMeasurement }
     *     
     */
    public SummaryMeasurement getCurrentDayNetConsumption() {
        return currentDayNetConsumption;
    }

    /**
     * Sets the value of the currentDayNetConsumption property.
     * 
     * @param value
     *     allowed object is
     *     {@link SummaryMeasurement }
     *     
     */
    public void setCurrentDayNetConsumption(SummaryMeasurement value) {
        this.currentDayNetConsumption = value;
    }

    /**
     * Gets the value of the currentDayOverallConsumption property.
     * 
     * @return
     *     possible object is
     *     {@link SummaryMeasurement }
     *     
     */
    public SummaryMeasurement getCurrentDayOverallConsumption() {
        return currentDayOverallConsumption;
    }

    /**
     * Sets the value of the currentDayOverallConsumption property.
     * 
     * @param value
     *     allowed object is
     *     {@link SummaryMeasurement }
     *     
     */
    public void setCurrentDayOverallConsumption(SummaryMeasurement value) {
        this.currentDayOverallConsumption = value;
    }

    /**
     * Gets the value of the peakDemand property.
     * 
     * @return
     *     possible object is
     *     {@link SummaryMeasurement }
     *     
     */
    public SummaryMeasurement getPeakDemand() {
        return peakDemand;
    }

    /**
     * Sets the value of the peakDemand property.
     * 
     * @param value
     *     allowed object is
     *     {@link SummaryMeasurement }
     *     
     */
    public void setPeakDemand(SummaryMeasurement value) {
        this.peakDemand = value;
    }

    /**
     * Gets the value of the previousDayLastYearOverallConsumption property.
     * 
     * @return
     *     possible object is
     *     {@link SummaryMeasurement }
     *     
     */
    public SummaryMeasurement getPreviousDayLastYearOverallConsumption() {
        return previousDayLastYearOverallConsumption;
    }

    /**
     * Sets the value of the previousDayLastYearOverallConsumption property.
     * 
     * @param value
     *     allowed object is
     *     {@link SummaryMeasurement }
     *     
     */
    public void setPreviousDayLastYearOverallConsumption(SummaryMeasurement value) {
        this.previousDayLastYearOverallConsumption = value;
    }

    /**
     * Gets the value of the previousDayNetConsumption property.
     * 
     * @return
     *     possible object is
     *     {@link SummaryMeasurement }
     *     
     */
    public SummaryMeasurement getPreviousDayNetConsumption() {
        return previousDayNetConsumption;
    }

    /**
     * Sets the value of the previousDayNetConsumption property.
     * 
     * @param value
     *     allowed object is
     *     {@link SummaryMeasurement }
     *     
     */
    public void setPreviousDayNetConsumption(SummaryMeasurement value) {
        this.previousDayNetConsumption = value;
    }

    /**
     * Gets the value of the previousDayOverallConsumption property.
     * 
     * @return
     *     possible object is
     *     {@link SummaryMeasurement }
     *     
     */
    public SummaryMeasurement getPreviousDayOverallConsumption() {
        return previousDayOverallConsumption;
    }

    /**
     * Sets the value of the previousDayOverallConsumption property.
     * 
     * @param value
     *     allowed object is
     *     {@link SummaryMeasurement }
     *     
     */
    public void setPreviousDayOverallConsumption(SummaryMeasurement value) {
        this.previousDayOverallConsumption = value;
    }

    /**
     * Gets the value of the qualityOfReading property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getQualityOfReading() {
        return qualityOfReading;
    }

    /**
     * Sets the value of the qualityOfReading property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setQualityOfReading(String value) {
        this.qualityOfReading = value;
    }

    /**
     * Gets the value of the ratchetDemand property.
     * 
     * @return
     *     possible object is
     *     {@link SummaryMeasurement }
     *     
     */
    public SummaryMeasurement getRatchetDemand() {
        return ratchetDemand;
    }

    /**
     * Sets the value of the ratchetDemand property.
     * 
     * @param value
     *     allowed object is
     *     {@link SummaryMeasurement }
     *     
     */
    public void setRatchetDemand(SummaryMeasurement value) {
        this.ratchetDemand = value;
    }

    /**
     * Gets the value of the ratchetDemandPeriod property.
     * 
     * @return
     *     possible object is
     *     {@link DateTimeInterval }
     *     
     */
    public DateTimeInterval getRatchetDemandPeriod() {
        return ratchetDemandPeriod;
    }

    /**
     * Sets the value of the ratchetDemandPeriod property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTimeInterval }
     *     
     */
    public void setRatchetDemandPeriod(DateTimeInterval value) {
        this.ratchetDemandPeriod = value;
    }

    /**
     * Gets the value of the statusTimeStamp property.
     * 
     */
    public long getStatusTimeStamp() {
        return statusTimeStamp;
    }

    /**
     * Sets the value of the statusTimeStamp property.
     * 
     */
    public void setStatusTimeStamp(long value) {
        this.statusTimeStamp = value;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            DateTimeInterval theBillingPeriod;
            theBillingPeriod = this.getBillingPeriod();
            strategy.appendField(locator, this, "billingPeriod", buffer, theBillingPeriod, (this.billingPeriod!= null));
        }
        {
            Long theBillLastPeriod;
            theBillLastPeriod = this.getBillLastPeriod();
            strategy.appendField(locator, this, "billLastPeriod", buffer, theBillLastPeriod, (this.billLastPeriod!= null));
        }
        {
            Long theBillToDate;
            theBillToDate = this.getBillToDate();
            strategy.appendField(locator, this, "billToDate", buffer, theBillToDate, (this.billToDate!= null));
        }
        {
            Long theCostAdditionalLastPeriod;
            theCostAdditionalLastPeriod = this.getCostAdditionalLastPeriod();
            strategy.appendField(locator, this, "costAdditionalLastPeriod", buffer, theCostAdditionalLastPeriod, (this.costAdditionalLastPeriod!= null));
        }
        {
            List<LineItem> theCostAdditionalDetailLastPeriods;
            theCostAdditionalDetailLastPeriods = (((this.costAdditionalDetailLastPeriods!= null)&&(!this.costAdditionalDetailLastPeriods.isEmpty()))?this.getCostAdditionalDetailLastPeriods():null);
            strategy.appendField(locator, this, "costAdditionalDetailLastPeriods", buffer, theCostAdditionalDetailLastPeriods, ((this.costAdditionalDetailLastPeriods!= null)&&(!this.costAdditionalDetailLastPeriods.isEmpty())));
        }
        {
            String theCurrency;
            theCurrency = this.getCurrency();
            strategy.appendField(locator, this, "currency", buffer, theCurrency, (this.currency!= null));
        }
        {
            SummaryMeasurement theOverallConsumptionLastPeriod;
            theOverallConsumptionLastPeriod = this.getOverallConsumptionLastPeriod();
            strategy.appendField(locator, this, "overallConsumptionLastPeriod", buffer, theOverallConsumptionLastPeriod, (this.overallConsumptionLastPeriod!= null));
        }
        {
            SummaryMeasurement theCurrentBillingPeriodOverAllConsumption;
            theCurrentBillingPeriodOverAllConsumption = this.getCurrentBillingPeriodOverAllConsumption();
            strategy.appendField(locator, this, "currentBillingPeriodOverAllConsumption", buffer, theCurrentBillingPeriodOverAllConsumption, (this.currentBillingPeriodOverAllConsumption!= null));
        }
        {
            SummaryMeasurement theCurrentDayLastYearNetConsumption;
            theCurrentDayLastYearNetConsumption = this.getCurrentDayLastYearNetConsumption();
            strategy.appendField(locator, this, "currentDayLastYearNetConsumption", buffer, theCurrentDayLastYearNetConsumption, (this.currentDayLastYearNetConsumption!= null));
        }
        {
            SummaryMeasurement theCurrentDayNetConsumption;
            theCurrentDayNetConsumption = this.getCurrentDayNetConsumption();
            strategy.appendField(locator, this, "currentDayNetConsumption", buffer, theCurrentDayNetConsumption, (this.currentDayNetConsumption!= null));
        }
        {
            SummaryMeasurement theCurrentDayOverallConsumption;
            theCurrentDayOverallConsumption = this.getCurrentDayOverallConsumption();
            strategy.appendField(locator, this, "currentDayOverallConsumption", buffer, theCurrentDayOverallConsumption, (this.currentDayOverallConsumption!= null));
        }
        {
            SummaryMeasurement thePeakDemand;
            thePeakDemand = this.getPeakDemand();
            strategy.appendField(locator, this, "peakDemand", buffer, thePeakDemand, (this.peakDemand!= null));
        }
        {
            SummaryMeasurement thePreviousDayLastYearOverallConsumption;
            thePreviousDayLastYearOverallConsumption = this.getPreviousDayLastYearOverallConsumption();
            strategy.appendField(locator, this, "previousDayLastYearOverallConsumption", buffer, thePreviousDayLastYearOverallConsumption, (this.previousDayLastYearOverallConsumption!= null));
        }
        {
            SummaryMeasurement thePreviousDayNetConsumption;
            thePreviousDayNetConsumption = this.getPreviousDayNetConsumption();
            strategy.appendField(locator, this, "previousDayNetConsumption", buffer, thePreviousDayNetConsumption, (this.previousDayNetConsumption!= null));
        }
        {
            SummaryMeasurement thePreviousDayOverallConsumption;
            thePreviousDayOverallConsumption = this.getPreviousDayOverallConsumption();
            strategy.appendField(locator, this, "previousDayOverallConsumption", buffer, thePreviousDayOverallConsumption, (this.previousDayOverallConsumption!= null));
        }
        {
            String theQualityOfReading;
            theQualityOfReading = this.getQualityOfReading();
            strategy.appendField(locator, this, "qualityOfReading", buffer, theQualityOfReading, (this.qualityOfReading!= null));
        }
        {
            SummaryMeasurement theRatchetDemand;
            theRatchetDemand = this.getRatchetDemand();
            strategy.appendField(locator, this, "ratchetDemand", buffer, theRatchetDemand, (this.ratchetDemand!= null));
        }
        {
            DateTimeInterval theRatchetDemandPeriod;
            theRatchetDemandPeriod = this.getRatchetDemandPeriod();
            strategy.appendField(locator, this, "ratchetDemandPeriod", buffer, theRatchetDemandPeriod, (this.ratchetDemandPeriod!= null));
        }
        {
            long theStatusTimeStamp;
            theStatusTimeStamp = this.getStatusTimeStamp();
            strategy.appendField(locator, this, "statusTimeStamp", buffer, theStatusTimeStamp, true);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, java.lang.Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ElectricPowerUsageSummary that = ((ElectricPowerUsageSummary) object);
        {
            DateTimeInterval lhsBillingPeriod;
            lhsBillingPeriod = this.getBillingPeriod();
            DateTimeInterval rhsBillingPeriod;
            rhsBillingPeriod = that.getBillingPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "billingPeriod", lhsBillingPeriod), LocatorUtils.property(thatLocator, "billingPeriod", rhsBillingPeriod), lhsBillingPeriod, rhsBillingPeriod, (this.billingPeriod!= null), (that.billingPeriod!= null))) {
                return false;
            }
        }
        {
            Long lhsBillLastPeriod;
            lhsBillLastPeriod = this.getBillLastPeriod();
            Long rhsBillLastPeriod;
            rhsBillLastPeriod = that.getBillLastPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "billLastPeriod", lhsBillLastPeriod), LocatorUtils.property(thatLocator, "billLastPeriod", rhsBillLastPeriod), lhsBillLastPeriod, rhsBillLastPeriod, (this.billLastPeriod!= null), (that.billLastPeriod!= null))) {
                return false;
            }
        }
        {
            Long lhsBillToDate;
            lhsBillToDate = this.getBillToDate();
            Long rhsBillToDate;
            rhsBillToDate = that.getBillToDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "billToDate", lhsBillToDate), LocatorUtils.property(thatLocator, "billToDate", rhsBillToDate), lhsBillToDate, rhsBillToDate, (this.billToDate!= null), (that.billToDate!= null))) {
                return false;
            }
        }
        {
            Long lhsCostAdditionalLastPeriod;
            lhsCostAdditionalLastPeriod = this.getCostAdditionalLastPeriod();
            Long rhsCostAdditionalLastPeriod;
            rhsCostAdditionalLastPeriod = that.getCostAdditionalLastPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "costAdditionalLastPeriod", lhsCostAdditionalLastPeriod), LocatorUtils.property(thatLocator, "costAdditionalLastPeriod", rhsCostAdditionalLastPeriod), lhsCostAdditionalLastPeriod, rhsCostAdditionalLastPeriod, (this.costAdditionalLastPeriod!= null), (that.costAdditionalLastPeriod!= null))) {
                return false;
            }
        }
        {
            List<LineItem> lhsCostAdditionalDetailLastPeriods;
            lhsCostAdditionalDetailLastPeriods = (((this.costAdditionalDetailLastPeriods!= null)&&(!this.costAdditionalDetailLastPeriods.isEmpty()))?this.getCostAdditionalDetailLastPeriods():null);
            List<LineItem> rhsCostAdditionalDetailLastPeriods;
            rhsCostAdditionalDetailLastPeriods = (((that.costAdditionalDetailLastPeriods!= null)&&(!that.costAdditionalDetailLastPeriods.isEmpty()))?that.getCostAdditionalDetailLastPeriods():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "costAdditionalDetailLastPeriods", lhsCostAdditionalDetailLastPeriods), LocatorUtils.property(thatLocator, "costAdditionalDetailLastPeriods", rhsCostAdditionalDetailLastPeriods), lhsCostAdditionalDetailLastPeriods, rhsCostAdditionalDetailLastPeriods, ((this.costAdditionalDetailLastPeriods!= null)&&(!this.costAdditionalDetailLastPeriods.isEmpty())), ((that.costAdditionalDetailLastPeriods!= null)&&(!that.costAdditionalDetailLastPeriods.isEmpty())))) {
                return false;
            }
        }
        {
            String lhsCurrency;
            lhsCurrency = this.getCurrency();
            String rhsCurrency;
            rhsCurrency = that.getCurrency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currency", lhsCurrency), LocatorUtils.property(thatLocator, "currency", rhsCurrency), lhsCurrency, rhsCurrency, (this.currency!= null), (that.currency!= null))) {
                return false;
            }
        }
        {
            SummaryMeasurement lhsOverallConsumptionLastPeriod;
            lhsOverallConsumptionLastPeriod = this.getOverallConsumptionLastPeriod();
            SummaryMeasurement rhsOverallConsumptionLastPeriod;
            rhsOverallConsumptionLastPeriod = that.getOverallConsumptionLastPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "overallConsumptionLastPeriod", lhsOverallConsumptionLastPeriod), LocatorUtils.property(thatLocator, "overallConsumptionLastPeriod", rhsOverallConsumptionLastPeriod), lhsOverallConsumptionLastPeriod, rhsOverallConsumptionLastPeriod, (this.overallConsumptionLastPeriod!= null), (that.overallConsumptionLastPeriod!= null))) {
                return false;
            }
        }
        {
            SummaryMeasurement lhsCurrentBillingPeriodOverAllConsumption;
            lhsCurrentBillingPeriodOverAllConsumption = this.getCurrentBillingPeriodOverAllConsumption();
            SummaryMeasurement rhsCurrentBillingPeriodOverAllConsumption;
            rhsCurrentBillingPeriodOverAllConsumption = that.getCurrentBillingPeriodOverAllConsumption();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentBillingPeriodOverAllConsumption", lhsCurrentBillingPeriodOverAllConsumption), LocatorUtils.property(thatLocator, "currentBillingPeriodOverAllConsumption", rhsCurrentBillingPeriodOverAllConsumption), lhsCurrentBillingPeriodOverAllConsumption, rhsCurrentBillingPeriodOverAllConsumption, (this.currentBillingPeriodOverAllConsumption!= null), (that.currentBillingPeriodOverAllConsumption!= null))) {
                return false;
            }
        }
        {
            SummaryMeasurement lhsCurrentDayLastYearNetConsumption;
            lhsCurrentDayLastYearNetConsumption = this.getCurrentDayLastYearNetConsumption();
            SummaryMeasurement rhsCurrentDayLastYearNetConsumption;
            rhsCurrentDayLastYearNetConsumption = that.getCurrentDayLastYearNetConsumption();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentDayLastYearNetConsumption", lhsCurrentDayLastYearNetConsumption), LocatorUtils.property(thatLocator, "currentDayLastYearNetConsumption", rhsCurrentDayLastYearNetConsumption), lhsCurrentDayLastYearNetConsumption, rhsCurrentDayLastYearNetConsumption, (this.currentDayLastYearNetConsumption!= null), (that.currentDayLastYearNetConsumption!= null))) {
                return false;
            }
        }
        {
            SummaryMeasurement lhsCurrentDayNetConsumption;
            lhsCurrentDayNetConsumption = this.getCurrentDayNetConsumption();
            SummaryMeasurement rhsCurrentDayNetConsumption;
            rhsCurrentDayNetConsumption = that.getCurrentDayNetConsumption();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentDayNetConsumption", lhsCurrentDayNetConsumption), LocatorUtils.property(thatLocator, "currentDayNetConsumption", rhsCurrentDayNetConsumption), lhsCurrentDayNetConsumption, rhsCurrentDayNetConsumption, (this.currentDayNetConsumption!= null), (that.currentDayNetConsumption!= null))) {
                return false;
            }
        }
        {
            SummaryMeasurement lhsCurrentDayOverallConsumption;
            lhsCurrentDayOverallConsumption = this.getCurrentDayOverallConsumption();
            SummaryMeasurement rhsCurrentDayOverallConsumption;
            rhsCurrentDayOverallConsumption = that.getCurrentDayOverallConsumption();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentDayOverallConsumption", lhsCurrentDayOverallConsumption), LocatorUtils.property(thatLocator, "currentDayOverallConsumption", rhsCurrentDayOverallConsumption), lhsCurrentDayOverallConsumption, rhsCurrentDayOverallConsumption, (this.currentDayOverallConsumption!= null), (that.currentDayOverallConsumption!= null))) {
                return false;
            }
        }
        {
            SummaryMeasurement lhsPeakDemand;
            lhsPeakDemand = this.getPeakDemand();
            SummaryMeasurement rhsPeakDemand;
            rhsPeakDemand = that.getPeakDemand();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "peakDemand", lhsPeakDemand), LocatorUtils.property(thatLocator, "peakDemand", rhsPeakDemand), lhsPeakDemand, rhsPeakDemand, (this.peakDemand!= null), (that.peakDemand!= null))) {
                return false;
            }
        }
        {
            SummaryMeasurement lhsPreviousDayLastYearOverallConsumption;
            lhsPreviousDayLastYearOverallConsumption = this.getPreviousDayLastYearOverallConsumption();
            SummaryMeasurement rhsPreviousDayLastYearOverallConsumption;
            rhsPreviousDayLastYearOverallConsumption = that.getPreviousDayLastYearOverallConsumption();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "previousDayLastYearOverallConsumption", lhsPreviousDayLastYearOverallConsumption), LocatorUtils.property(thatLocator, "previousDayLastYearOverallConsumption", rhsPreviousDayLastYearOverallConsumption), lhsPreviousDayLastYearOverallConsumption, rhsPreviousDayLastYearOverallConsumption, (this.previousDayLastYearOverallConsumption!= null), (that.previousDayLastYearOverallConsumption!= null))) {
                return false;
            }
        }
        {
            SummaryMeasurement lhsPreviousDayNetConsumption;
            lhsPreviousDayNetConsumption = this.getPreviousDayNetConsumption();
            SummaryMeasurement rhsPreviousDayNetConsumption;
            rhsPreviousDayNetConsumption = that.getPreviousDayNetConsumption();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "previousDayNetConsumption", lhsPreviousDayNetConsumption), LocatorUtils.property(thatLocator, "previousDayNetConsumption", rhsPreviousDayNetConsumption), lhsPreviousDayNetConsumption, rhsPreviousDayNetConsumption, (this.previousDayNetConsumption!= null), (that.previousDayNetConsumption!= null))) {
                return false;
            }
        }
        {
            SummaryMeasurement lhsPreviousDayOverallConsumption;
            lhsPreviousDayOverallConsumption = this.getPreviousDayOverallConsumption();
            SummaryMeasurement rhsPreviousDayOverallConsumption;
            rhsPreviousDayOverallConsumption = that.getPreviousDayOverallConsumption();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "previousDayOverallConsumption", lhsPreviousDayOverallConsumption), LocatorUtils.property(thatLocator, "previousDayOverallConsumption", rhsPreviousDayOverallConsumption), lhsPreviousDayOverallConsumption, rhsPreviousDayOverallConsumption, (this.previousDayOverallConsumption!= null), (that.previousDayOverallConsumption!= null))) {
                return false;
            }
        }
        {
            String lhsQualityOfReading;
            lhsQualityOfReading = this.getQualityOfReading();
            String rhsQualityOfReading;
            rhsQualityOfReading = that.getQualityOfReading();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "qualityOfReading", lhsQualityOfReading), LocatorUtils.property(thatLocator, "qualityOfReading", rhsQualityOfReading), lhsQualityOfReading, rhsQualityOfReading, (this.qualityOfReading!= null), (that.qualityOfReading!= null))) {
                return false;
            }
        }
        {
            SummaryMeasurement lhsRatchetDemand;
            lhsRatchetDemand = this.getRatchetDemand();
            SummaryMeasurement rhsRatchetDemand;
            rhsRatchetDemand = that.getRatchetDemand();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ratchetDemand", lhsRatchetDemand), LocatorUtils.property(thatLocator, "ratchetDemand", rhsRatchetDemand), lhsRatchetDemand, rhsRatchetDemand, (this.ratchetDemand!= null), (that.ratchetDemand!= null))) {
                return false;
            }
        }
        {
            DateTimeInterval lhsRatchetDemandPeriod;
            lhsRatchetDemandPeriod = this.getRatchetDemandPeriod();
            DateTimeInterval rhsRatchetDemandPeriod;
            rhsRatchetDemandPeriod = that.getRatchetDemandPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ratchetDemandPeriod", lhsRatchetDemandPeriod), LocatorUtils.property(thatLocator, "ratchetDemandPeriod", rhsRatchetDemandPeriod), lhsRatchetDemandPeriod, rhsRatchetDemandPeriod, (this.ratchetDemandPeriod!= null), (that.ratchetDemandPeriod!= null))) {
                return false;
            }
        }
        {
            long lhsStatusTimeStamp;
            lhsStatusTimeStamp = this.getStatusTimeStamp();
            long rhsStatusTimeStamp;
            rhsStatusTimeStamp = that.getStatusTimeStamp();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "statusTimeStamp", lhsStatusTimeStamp), LocatorUtils.property(thatLocator, "statusTimeStamp", rhsStatusTimeStamp), lhsStatusTimeStamp, rhsStatusTimeStamp, true, true)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(java.lang.Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            DateTimeInterval theBillingPeriod;
            theBillingPeriod = this.getBillingPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "billingPeriod", theBillingPeriod), currentHashCode, theBillingPeriod, (this.billingPeriod!= null));
        }
        {
            Long theBillLastPeriod;
            theBillLastPeriod = this.getBillLastPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "billLastPeriod", theBillLastPeriod), currentHashCode, theBillLastPeriod, (this.billLastPeriod!= null));
        }
        {
            Long theBillToDate;
            theBillToDate = this.getBillToDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "billToDate", theBillToDate), currentHashCode, theBillToDate, (this.billToDate!= null));
        }
        {
            Long theCostAdditionalLastPeriod;
            theCostAdditionalLastPeriod = this.getCostAdditionalLastPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "costAdditionalLastPeriod", theCostAdditionalLastPeriod), currentHashCode, theCostAdditionalLastPeriod, (this.costAdditionalLastPeriod!= null));
        }
        {
            List<LineItem> theCostAdditionalDetailLastPeriods;
            theCostAdditionalDetailLastPeriods = (((this.costAdditionalDetailLastPeriods!= null)&&(!this.costAdditionalDetailLastPeriods.isEmpty()))?this.getCostAdditionalDetailLastPeriods():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "costAdditionalDetailLastPeriods", theCostAdditionalDetailLastPeriods), currentHashCode, theCostAdditionalDetailLastPeriods, ((this.costAdditionalDetailLastPeriods!= null)&&(!this.costAdditionalDetailLastPeriods.isEmpty())));
        }
        {
            String theCurrency;
            theCurrency = this.getCurrency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currency", theCurrency), currentHashCode, theCurrency, (this.currency!= null));
        }
        {
            SummaryMeasurement theOverallConsumptionLastPeriod;
            theOverallConsumptionLastPeriod = this.getOverallConsumptionLastPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "overallConsumptionLastPeriod", theOverallConsumptionLastPeriod), currentHashCode, theOverallConsumptionLastPeriod, (this.overallConsumptionLastPeriod!= null));
        }
        {
            SummaryMeasurement theCurrentBillingPeriodOverAllConsumption;
            theCurrentBillingPeriodOverAllConsumption = this.getCurrentBillingPeriodOverAllConsumption();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentBillingPeriodOverAllConsumption", theCurrentBillingPeriodOverAllConsumption), currentHashCode, theCurrentBillingPeriodOverAllConsumption, (this.currentBillingPeriodOverAllConsumption!= null));
        }
        {
            SummaryMeasurement theCurrentDayLastYearNetConsumption;
            theCurrentDayLastYearNetConsumption = this.getCurrentDayLastYearNetConsumption();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentDayLastYearNetConsumption", theCurrentDayLastYearNetConsumption), currentHashCode, theCurrentDayLastYearNetConsumption, (this.currentDayLastYearNetConsumption!= null));
        }
        {
            SummaryMeasurement theCurrentDayNetConsumption;
            theCurrentDayNetConsumption = this.getCurrentDayNetConsumption();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentDayNetConsumption", theCurrentDayNetConsumption), currentHashCode, theCurrentDayNetConsumption, (this.currentDayNetConsumption!= null));
        }
        {
            SummaryMeasurement theCurrentDayOverallConsumption;
            theCurrentDayOverallConsumption = this.getCurrentDayOverallConsumption();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentDayOverallConsumption", theCurrentDayOverallConsumption), currentHashCode, theCurrentDayOverallConsumption, (this.currentDayOverallConsumption!= null));
        }
        {
            SummaryMeasurement thePeakDemand;
            thePeakDemand = this.getPeakDemand();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "peakDemand", thePeakDemand), currentHashCode, thePeakDemand, (this.peakDemand!= null));
        }
        {
            SummaryMeasurement thePreviousDayLastYearOverallConsumption;
            thePreviousDayLastYearOverallConsumption = this.getPreviousDayLastYearOverallConsumption();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "previousDayLastYearOverallConsumption", thePreviousDayLastYearOverallConsumption), currentHashCode, thePreviousDayLastYearOverallConsumption, (this.previousDayLastYearOverallConsumption!= null));
        }
        {
            SummaryMeasurement thePreviousDayNetConsumption;
            thePreviousDayNetConsumption = this.getPreviousDayNetConsumption();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "previousDayNetConsumption", thePreviousDayNetConsumption), currentHashCode, thePreviousDayNetConsumption, (this.previousDayNetConsumption!= null));
        }
        {
            SummaryMeasurement thePreviousDayOverallConsumption;
            thePreviousDayOverallConsumption = this.getPreviousDayOverallConsumption();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "previousDayOverallConsumption", thePreviousDayOverallConsumption), currentHashCode, thePreviousDayOverallConsumption, (this.previousDayOverallConsumption!= null));
        }
        {
            String theQualityOfReading;
            theQualityOfReading = this.getQualityOfReading();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "qualityOfReading", theQualityOfReading), currentHashCode, theQualityOfReading, (this.qualityOfReading!= null));
        }
        {
            SummaryMeasurement theRatchetDemand;
            theRatchetDemand = this.getRatchetDemand();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ratchetDemand", theRatchetDemand), currentHashCode, theRatchetDemand, (this.ratchetDemand!= null));
        }
        {
            DateTimeInterval theRatchetDemandPeriod;
            theRatchetDemandPeriod = this.getRatchetDemandPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ratchetDemandPeriod", theRatchetDemandPeriod), currentHashCode, theRatchetDemandPeriod, (this.ratchetDemandPeriod!= null));
        }
        {
            long theStatusTimeStamp;
            theStatusTimeStamp = this.getStatusTimeStamp();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "statusTimeStamp", theStatusTimeStamp), currentHashCode, theStatusTimeStamp, true);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public ElectricPowerUsageSummary withBillingPeriod(DateTimeInterval value) {
        setBillingPeriod(value);
        return this;
    }

    public ElectricPowerUsageSummary withBillLastPeriod(Long value) {
        setBillLastPeriod(value);
        return this;
    }

    public ElectricPowerUsageSummary withBillToDate(Long value) {
        setBillToDate(value);
        return this;
    }

    public ElectricPowerUsageSummary withCostAdditionalLastPeriod(Long value) {
        setCostAdditionalLastPeriod(value);
        return this;
    }

    public ElectricPowerUsageSummary withCostAdditionalDetailLastPeriods(LineItem... values) {
        if (values!= null) {
            for (LineItem value: values) {
                getCostAdditionalDetailLastPeriods().add(value);
            }
        }
        return this;
    }

    public ElectricPowerUsageSummary withCostAdditionalDetailLastPeriods(Collection<LineItem> values) {
        if (values!= null) {
            getCostAdditionalDetailLastPeriods().addAll(values);
        }
        return this;
    }

    public ElectricPowerUsageSummary withCurrency(String value) {
        setCurrency(value);
        return this;
    }

    public ElectricPowerUsageSummary withOverallConsumptionLastPeriod(SummaryMeasurement value) {
        setOverallConsumptionLastPeriod(value);
        return this;
    }

    public ElectricPowerUsageSummary withCurrentBillingPeriodOverAllConsumption(SummaryMeasurement value) {
        setCurrentBillingPeriodOverAllConsumption(value);
        return this;
    }

    public ElectricPowerUsageSummary withCurrentDayLastYearNetConsumption(SummaryMeasurement value) {
        setCurrentDayLastYearNetConsumption(value);
        return this;
    }

    public ElectricPowerUsageSummary withCurrentDayNetConsumption(SummaryMeasurement value) {
        setCurrentDayNetConsumption(value);
        return this;
    }

    public ElectricPowerUsageSummary withCurrentDayOverallConsumption(SummaryMeasurement value) {
        setCurrentDayOverallConsumption(value);
        return this;
    }

    public ElectricPowerUsageSummary withPeakDemand(SummaryMeasurement value) {
        setPeakDemand(value);
        return this;
    }

    public ElectricPowerUsageSummary withPreviousDayLastYearOverallConsumption(SummaryMeasurement value) {
        setPreviousDayLastYearOverallConsumption(value);
        return this;
    }

    public ElectricPowerUsageSummary withPreviousDayNetConsumption(SummaryMeasurement value) {
        setPreviousDayNetConsumption(value);
        return this;
    }

    public ElectricPowerUsageSummary withPreviousDayOverallConsumption(SummaryMeasurement value) {
        setPreviousDayOverallConsumption(value);
        return this;
    }

    public ElectricPowerUsageSummary withQualityOfReading(String value) {
        setQualityOfReading(value);
        return this;
    }

    public ElectricPowerUsageSummary withRatchetDemand(SummaryMeasurement value) {
        setRatchetDemand(value);
        return this;
    }

    public ElectricPowerUsageSummary withRatchetDemandPeriod(DateTimeInterval value) {
        setRatchetDemandPeriod(value);
        return this;
    }

    public ElectricPowerUsageSummary withStatusTimeStamp(long value) {
        setStatusTimeStamp(value);
        return this;
    }

    @Override
    public ElectricPowerUsageSummary withBatchItemInfo(BatchItemInfo value) {
        setBatchItemInfo(value);
        return this;
    }

    @Override
    public ElectricPowerUsageSummary withExtensions(java.lang.Object... values) {
        if (values!= null) {
            for (java.lang.Object value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ElectricPowerUsageSummary withExtensions(Collection<java.lang.Object> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

}
