//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.2-hudson-jaxb-ri-2.2-63- 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.02.02 at 02:58:26 PM NZDT 
//


package openadr.model.v20b.greenbutton;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A summary of power quality events. This information represents a summary of power quality information typically required by customer facility energy management systems. It is not intended to satisfy the detailed requirements of power quality monitoring. All values are as defined by measurementProtocol during the period. The standards typically also give ranges of allowed values; the information attributes are the raw measurements, not the "yes/no" determination by the various standards. See referenced standards for definition, measurement protocol and period.
 * 
 * <p>Java class for ElectricPowerQualitySummary complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ElectricPowerQualitySummary">
 *   &lt;complexContent>
 *     &lt;extension base="{http://naesb.org/espi}IdentifiedObject">
 *       &lt;sequence>
 *         &lt;element name="flickerPlt" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *         &lt;element name="flickerPst" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *         &lt;element name="harmonicVoltage" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *         &lt;element name="longInterruptions" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *         &lt;element name="mainsVoltage" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *         &lt;element name="measurementProtocol" type="{http://naesb.org/espi}UInt8" minOccurs="0"/>
 *         &lt;element name="powerFrequency" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *         &lt;element name="rapidVoltageChanges" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *         &lt;element name="shortInterruptions" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *         &lt;element name="summaryInterval" type="{http://naesb.org/espi}DateTimeInterval"/>
 *         &lt;element name="supplyVoltageDips" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *         &lt;element name="supplyVoltageImbalance" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *         &lt;element name="supplyVoltageVariations" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *         &lt;element name="tempOvervoltage" type="{http://naesb.org/espi}Int48" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ElectricPowerQualitySummary", propOrder = {
    "flickerPlt",
    "flickerPst",
    "harmonicVoltage",
    "longInterruptions",
    "mainsVoltage",
    "measurementProtocol",
    "powerFrequency",
    "rapidVoltageChanges",
    "shortInterruptions",
    "summaryInterval",
    "supplyVoltageDips",
    "supplyVoltageImbalance",
    "supplyVoltageVariations",
    "tempOvervoltage"
})
@XmlRootElement(name = "ElectricPowerQualitySummary")
public class ElectricPowerQualitySummary
    extends IdentifiedObject
    implements Serializable, Equals2, HashCode2, ToString2
{

    private final static long serialVersionUID = 1L;
    protected Long flickerPlt;
    protected Long flickerPst;
    protected Long harmonicVoltage;
    protected Long longInterruptions;
    protected Long mainsVoltage;
    protected Short measurementProtocol;
    protected Long powerFrequency;
    protected Long rapidVoltageChanges;
    protected Long shortInterruptions;
    @XmlElement(required = true)
    protected DateTimeInterval summaryInterval;
    protected Long supplyVoltageDips;
    protected Long supplyVoltageImbalance;
    protected Long supplyVoltageVariations;
    protected Long tempOvervoltage;

    /**
     * Default no-arg constructor
     * 
     */
    public ElectricPowerQualitySummary() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public ElectricPowerQualitySummary(final List<java.lang.Object> extensions, final BatchItemInfo batchItemInfo, final Long flickerPlt, final Long flickerPst, final Long harmonicVoltage, final Long longInterruptions, final Long mainsVoltage, final Short measurementProtocol, final Long powerFrequency, final Long rapidVoltageChanges, final Long shortInterruptions, final DateTimeInterval summaryInterval, final Long supplyVoltageDips, final Long supplyVoltageImbalance, final Long supplyVoltageVariations, final Long tempOvervoltage) {
        super(extensions, batchItemInfo);
        this.flickerPlt = flickerPlt;
        this.flickerPst = flickerPst;
        this.harmonicVoltage = harmonicVoltage;
        this.longInterruptions = longInterruptions;
        this.mainsVoltage = mainsVoltage;
        this.measurementProtocol = measurementProtocol;
        this.powerFrequency = powerFrequency;
        this.rapidVoltageChanges = rapidVoltageChanges;
        this.shortInterruptions = shortInterruptions;
        this.summaryInterval = summaryInterval;
        this.supplyVoltageDips = supplyVoltageDips;
        this.supplyVoltageImbalance = supplyVoltageImbalance;
        this.supplyVoltageVariations = supplyVoltageVariations;
        this.tempOvervoltage = tempOvervoltage;
    }

    /**
     * Gets the value of the flickerPlt property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getFlickerPlt() {
        return flickerPlt;
    }

    /**
     * Sets the value of the flickerPlt property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFlickerPlt(Long value) {
        this.flickerPlt = value;
    }

    /**
     * Gets the value of the flickerPst property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getFlickerPst() {
        return flickerPst;
    }

    /**
     * Sets the value of the flickerPst property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setFlickerPst(Long value) {
        this.flickerPst = value;
    }

    /**
     * Gets the value of the harmonicVoltage property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getHarmonicVoltage() {
        return harmonicVoltage;
    }

    /**
     * Sets the value of the harmonicVoltage property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setHarmonicVoltage(Long value) {
        this.harmonicVoltage = value;
    }

    /**
     * Gets the value of the longInterruptions property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getLongInterruptions() {
        return longInterruptions;
    }

    /**
     * Sets the value of the longInterruptions property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setLongInterruptions(Long value) {
        this.longInterruptions = value;
    }

    /**
     * Gets the value of the mainsVoltage property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getMainsVoltage() {
        return mainsVoltage;
    }

    /**
     * Sets the value of the mainsVoltage property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setMainsVoltage(Long value) {
        this.mainsVoltage = value;
    }

    /**
     * Gets the value of the measurementProtocol property.
     * 
     * @return
     *     possible object is
     *     {@link Short }
     *     
     */
    public Short getMeasurementProtocol() {
        return measurementProtocol;
    }

    /**
     * Sets the value of the measurementProtocol property.
     * 
     * @param value
     *     allowed object is
     *     {@link Short }
     *     
     */
    public void setMeasurementProtocol(Short value) {
        this.measurementProtocol = value;
    }

    /**
     * Gets the value of the powerFrequency property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getPowerFrequency() {
        return powerFrequency;
    }

    /**
     * Sets the value of the powerFrequency property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setPowerFrequency(Long value) {
        this.powerFrequency = value;
    }

    /**
     * Gets the value of the rapidVoltageChanges property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getRapidVoltageChanges() {
        return rapidVoltageChanges;
    }

    /**
     * Sets the value of the rapidVoltageChanges property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setRapidVoltageChanges(Long value) {
        this.rapidVoltageChanges = value;
    }

    /**
     * Gets the value of the shortInterruptions property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getShortInterruptions() {
        return shortInterruptions;
    }

    /**
     * Sets the value of the shortInterruptions property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setShortInterruptions(Long value) {
        this.shortInterruptions = value;
    }

    /**
     * Gets the value of the summaryInterval property.
     * 
     * @return
     *     possible object is
     *     {@link DateTimeInterval }
     *     
     */
    public DateTimeInterval getSummaryInterval() {
        return summaryInterval;
    }

    /**
     * Sets the value of the summaryInterval property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTimeInterval }
     *     
     */
    public void setSummaryInterval(DateTimeInterval value) {
        this.summaryInterval = value;
    }

    /**
     * Gets the value of the supplyVoltageDips property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getSupplyVoltageDips() {
        return supplyVoltageDips;
    }

    /**
     * Sets the value of the supplyVoltageDips property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setSupplyVoltageDips(Long value) {
        this.supplyVoltageDips = value;
    }

    /**
     * Gets the value of the supplyVoltageImbalance property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getSupplyVoltageImbalance() {
        return supplyVoltageImbalance;
    }

    /**
     * Sets the value of the supplyVoltageImbalance property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setSupplyVoltageImbalance(Long value) {
        this.supplyVoltageImbalance = value;
    }

    /**
     * Gets the value of the supplyVoltageVariations property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getSupplyVoltageVariations() {
        return supplyVoltageVariations;
    }

    /**
     * Sets the value of the supplyVoltageVariations property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setSupplyVoltageVariations(Long value) {
        this.supplyVoltageVariations = value;
    }

    /**
     * Gets the value of the tempOvervoltage property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getTempOvervoltage() {
        return tempOvervoltage;
    }

    /**
     * Sets the value of the tempOvervoltage property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setTempOvervoltage(Long value) {
        this.tempOvervoltage = value;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            Long theFlickerPlt;
            theFlickerPlt = this.getFlickerPlt();
            strategy.appendField(locator, this, "flickerPlt", buffer, theFlickerPlt, (this.flickerPlt!= null));
        }
        {
            Long theFlickerPst;
            theFlickerPst = this.getFlickerPst();
            strategy.appendField(locator, this, "flickerPst", buffer, theFlickerPst, (this.flickerPst!= null));
        }
        {
            Long theHarmonicVoltage;
            theHarmonicVoltage = this.getHarmonicVoltage();
            strategy.appendField(locator, this, "harmonicVoltage", buffer, theHarmonicVoltage, (this.harmonicVoltage!= null));
        }
        {
            Long theLongInterruptions;
            theLongInterruptions = this.getLongInterruptions();
            strategy.appendField(locator, this, "longInterruptions", buffer, theLongInterruptions, (this.longInterruptions!= null));
        }
        {
            Long theMainsVoltage;
            theMainsVoltage = this.getMainsVoltage();
            strategy.appendField(locator, this, "mainsVoltage", buffer, theMainsVoltage, (this.mainsVoltage!= null));
        }
        {
            Short theMeasurementProtocol;
            theMeasurementProtocol = this.getMeasurementProtocol();
            strategy.appendField(locator, this, "measurementProtocol", buffer, theMeasurementProtocol, (this.measurementProtocol!= null));
        }
        {
            Long thePowerFrequency;
            thePowerFrequency = this.getPowerFrequency();
            strategy.appendField(locator, this, "powerFrequency", buffer, thePowerFrequency, (this.powerFrequency!= null));
        }
        {
            Long theRapidVoltageChanges;
            theRapidVoltageChanges = this.getRapidVoltageChanges();
            strategy.appendField(locator, this, "rapidVoltageChanges", buffer, theRapidVoltageChanges, (this.rapidVoltageChanges!= null));
        }
        {
            Long theShortInterruptions;
            theShortInterruptions = this.getShortInterruptions();
            strategy.appendField(locator, this, "shortInterruptions", buffer, theShortInterruptions, (this.shortInterruptions!= null));
        }
        {
            DateTimeInterval theSummaryInterval;
            theSummaryInterval = this.getSummaryInterval();
            strategy.appendField(locator, this, "summaryInterval", buffer, theSummaryInterval, (this.summaryInterval!= null));
        }
        {
            Long theSupplyVoltageDips;
            theSupplyVoltageDips = this.getSupplyVoltageDips();
            strategy.appendField(locator, this, "supplyVoltageDips", buffer, theSupplyVoltageDips, (this.supplyVoltageDips!= null));
        }
        {
            Long theSupplyVoltageImbalance;
            theSupplyVoltageImbalance = this.getSupplyVoltageImbalance();
            strategy.appendField(locator, this, "supplyVoltageImbalance", buffer, theSupplyVoltageImbalance, (this.supplyVoltageImbalance!= null));
        }
        {
            Long theSupplyVoltageVariations;
            theSupplyVoltageVariations = this.getSupplyVoltageVariations();
            strategy.appendField(locator, this, "supplyVoltageVariations", buffer, theSupplyVoltageVariations, (this.supplyVoltageVariations!= null));
        }
        {
            Long theTempOvervoltage;
            theTempOvervoltage = this.getTempOvervoltage();
            strategy.appendField(locator, this, "tempOvervoltage", buffer, theTempOvervoltage, (this.tempOvervoltage!= null));
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, java.lang.Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ElectricPowerQualitySummary that = ((ElectricPowerQualitySummary) object);
        {
            Long lhsFlickerPlt;
            lhsFlickerPlt = this.getFlickerPlt();
            Long rhsFlickerPlt;
            rhsFlickerPlt = that.getFlickerPlt();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flickerPlt", lhsFlickerPlt), LocatorUtils.property(thatLocator, "flickerPlt", rhsFlickerPlt), lhsFlickerPlt, rhsFlickerPlt, (this.flickerPlt!= null), (that.flickerPlt!= null))) {
                return false;
            }
        }
        {
            Long lhsFlickerPst;
            lhsFlickerPst = this.getFlickerPst();
            Long rhsFlickerPst;
            rhsFlickerPst = that.getFlickerPst();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flickerPst", lhsFlickerPst), LocatorUtils.property(thatLocator, "flickerPst", rhsFlickerPst), lhsFlickerPst, rhsFlickerPst, (this.flickerPst!= null), (that.flickerPst!= null))) {
                return false;
            }
        }
        {
            Long lhsHarmonicVoltage;
            lhsHarmonicVoltage = this.getHarmonicVoltage();
            Long rhsHarmonicVoltage;
            rhsHarmonicVoltage = that.getHarmonicVoltage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "harmonicVoltage", lhsHarmonicVoltage), LocatorUtils.property(thatLocator, "harmonicVoltage", rhsHarmonicVoltage), lhsHarmonicVoltage, rhsHarmonicVoltage, (this.harmonicVoltage!= null), (that.harmonicVoltage!= null))) {
                return false;
            }
        }
        {
            Long lhsLongInterruptions;
            lhsLongInterruptions = this.getLongInterruptions();
            Long rhsLongInterruptions;
            rhsLongInterruptions = that.getLongInterruptions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "longInterruptions", lhsLongInterruptions), LocatorUtils.property(thatLocator, "longInterruptions", rhsLongInterruptions), lhsLongInterruptions, rhsLongInterruptions, (this.longInterruptions!= null), (that.longInterruptions!= null))) {
                return false;
            }
        }
        {
            Long lhsMainsVoltage;
            lhsMainsVoltage = this.getMainsVoltage();
            Long rhsMainsVoltage;
            rhsMainsVoltage = that.getMainsVoltage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mainsVoltage", lhsMainsVoltage), LocatorUtils.property(thatLocator, "mainsVoltage", rhsMainsVoltage), lhsMainsVoltage, rhsMainsVoltage, (this.mainsVoltage!= null), (that.mainsVoltage!= null))) {
                return false;
            }
        }
        {
            Short lhsMeasurementProtocol;
            lhsMeasurementProtocol = this.getMeasurementProtocol();
            Short rhsMeasurementProtocol;
            rhsMeasurementProtocol = that.getMeasurementProtocol();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "measurementProtocol", lhsMeasurementProtocol), LocatorUtils.property(thatLocator, "measurementProtocol", rhsMeasurementProtocol), lhsMeasurementProtocol, rhsMeasurementProtocol, (this.measurementProtocol!= null), (that.measurementProtocol!= null))) {
                return false;
            }
        }
        {
            Long lhsPowerFrequency;
            lhsPowerFrequency = this.getPowerFrequency();
            Long rhsPowerFrequency;
            rhsPowerFrequency = that.getPowerFrequency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "powerFrequency", lhsPowerFrequency), LocatorUtils.property(thatLocator, "powerFrequency", rhsPowerFrequency), lhsPowerFrequency, rhsPowerFrequency, (this.powerFrequency!= null), (that.powerFrequency!= null))) {
                return false;
            }
        }
        {
            Long lhsRapidVoltageChanges;
            lhsRapidVoltageChanges = this.getRapidVoltageChanges();
            Long rhsRapidVoltageChanges;
            rhsRapidVoltageChanges = that.getRapidVoltageChanges();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rapidVoltageChanges", lhsRapidVoltageChanges), LocatorUtils.property(thatLocator, "rapidVoltageChanges", rhsRapidVoltageChanges), lhsRapidVoltageChanges, rhsRapidVoltageChanges, (this.rapidVoltageChanges!= null), (that.rapidVoltageChanges!= null))) {
                return false;
            }
        }
        {
            Long lhsShortInterruptions;
            lhsShortInterruptions = this.getShortInterruptions();
            Long rhsShortInterruptions;
            rhsShortInterruptions = that.getShortInterruptions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shortInterruptions", lhsShortInterruptions), LocatorUtils.property(thatLocator, "shortInterruptions", rhsShortInterruptions), lhsShortInterruptions, rhsShortInterruptions, (this.shortInterruptions!= null), (that.shortInterruptions!= null))) {
                return false;
            }
        }
        {
            DateTimeInterval lhsSummaryInterval;
            lhsSummaryInterval = this.getSummaryInterval();
            DateTimeInterval rhsSummaryInterval;
            rhsSummaryInterval = that.getSummaryInterval();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "summaryInterval", lhsSummaryInterval), LocatorUtils.property(thatLocator, "summaryInterval", rhsSummaryInterval), lhsSummaryInterval, rhsSummaryInterval, (this.summaryInterval!= null), (that.summaryInterval!= null))) {
                return false;
            }
        }
        {
            Long lhsSupplyVoltageDips;
            lhsSupplyVoltageDips = this.getSupplyVoltageDips();
            Long rhsSupplyVoltageDips;
            rhsSupplyVoltageDips = that.getSupplyVoltageDips();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "supplyVoltageDips", lhsSupplyVoltageDips), LocatorUtils.property(thatLocator, "supplyVoltageDips", rhsSupplyVoltageDips), lhsSupplyVoltageDips, rhsSupplyVoltageDips, (this.supplyVoltageDips!= null), (that.supplyVoltageDips!= null))) {
                return false;
            }
        }
        {
            Long lhsSupplyVoltageImbalance;
            lhsSupplyVoltageImbalance = this.getSupplyVoltageImbalance();
            Long rhsSupplyVoltageImbalance;
            rhsSupplyVoltageImbalance = that.getSupplyVoltageImbalance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "supplyVoltageImbalance", lhsSupplyVoltageImbalance), LocatorUtils.property(thatLocator, "supplyVoltageImbalance", rhsSupplyVoltageImbalance), lhsSupplyVoltageImbalance, rhsSupplyVoltageImbalance, (this.supplyVoltageImbalance!= null), (that.supplyVoltageImbalance!= null))) {
                return false;
            }
        }
        {
            Long lhsSupplyVoltageVariations;
            lhsSupplyVoltageVariations = this.getSupplyVoltageVariations();
            Long rhsSupplyVoltageVariations;
            rhsSupplyVoltageVariations = that.getSupplyVoltageVariations();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "supplyVoltageVariations", lhsSupplyVoltageVariations), LocatorUtils.property(thatLocator, "supplyVoltageVariations", rhsSupplyVoltageVariations), lhsSupplyVoltageVariations, rhsSupplyVoltageVariations, (this.supplyVoltageVariations!= null), (that.supplyVoltageVariations!= null))) {
                return false;
            }
        }
        {
            Long lhsTempOvervoltage;
            lhsTempOvervoltage = this.getTempOvervoltage();
            Long rhsTempOvervoltage;
            rhsTempOvervoltage = that.getTempOvervoltage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tempOvervoltage", lhsTempOvervoltage), LocatorUtils.property(thatLocator, "tempOvervoltage", rhsTempOvervoltage), lhsTempOvervoltage, rhsTempOvervoltage, (this.tempOvervoltage!= null), (that.tempOvervoltage!= null))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(java.lang.Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Long theFlickerPlt;
            theFlickerPlt = this.getFlickerPlt();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flickerPlt", theFlickerPlt), currentHashCode, theFlickerPlt, (this.flickerPlt!= null));
        }
        {
            Long theFlickerPst;
            theFlickerPst = this.getFlickerPst();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flickerPst", theFlickerPst), currentHashCode, theFlickerPst, (this.flickerPst!= null));
        }
        {
            Long theHarmonicVoltage;
            theHarmonicVoltage = this.getHarmonicVoltage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "harmonicVoltage", theHarmonicVoltage), currentHashCode, theHarmonicVoltage, (this.harmonicVoltage!= null));
        }
        {
            Long theLongInterruptions;
            theLongInterruptions = this.getLongInterruptions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longInterruptions", theLongInterruptions), currentHashCode, theLongInterruptions, (this.longInterruptions!= null));
        }
        {
            Long theMainsVoltage;
            theMainsVoltage = this.getMainsVoltage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mainsVoltage", theMainsVoltage), currentHashCode, theMainsVoltage, (this.mainsVoltage!= null));
        }
        {
            Short theMeasurementProtocol;
            theMeasurementProtocol = this.getMeasurementProtocol();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "measurementProtocol", theMeasurementProtocol), currentHashCode, theMeasurementProtocol, (this.measurementProtocol!= null));
        }
        {
            Long thePowerFrequency;
            thePowerFrequency = this.getPowerFrequency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "powerFrequency", thePowerFrequency), currentHashCode, thePowerFrequency, (this.powerFrequency!= null));
        }
        {
            Long theRapidVoltageChanges;
            theRapidVoltageChanges = this.getRapidVoltageChanges();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rapidVoltageChanges", theRapidVoltageChanges), currentHashCode, theRapidVoltageChanges, (this.rapidVoltageChanges!= null));
        }
        {
            Long theShortInterruptions;
            theShortInterruptions = this.getShortInterruptions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shortInterruptions", theShortInterruptions), currentHashCode, theShortInterruptions, (this.shortInterruptions!= null));
        }
        {
            DateTimeInterval theSummaryInterval;
            theSummaryInterval = this.getSummaryInterval();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "summaryInterval", theSummaryInterval), currentHashCode, theSummaryInterval, (this.summaryInterval!= null));
        }
        {
            Long theSupplyVoltageDips;
            theSupplyVoltageDips = this.getSupplyVoltageDips();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supplyVoltageDips", theSupplyVoltageDips), currentHashCode, theSupplyVoltageDips, (this.supplyVoltageDips!= null));
        }
        {
            Long theSupplyVoltageImbalance;
            theSupplyVoltageImbalance = this.getSupplyVoltageImbalance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supplyVoltageImbalance", theSupplyVoltageImbalance), currentHashCode, theSupplyVoltageImbalance, (this.supplyVoltageImbalance!= null));
        }
        {
            Long theSupplyVoltageVariations;
            theSupplyVoltageVariations = this.getSupplyVoltageVariations();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supplyVoltageVariations", theSupplyVoltageVariations), currentHashCode, theSupplyVoltageVariations, (this.supplyVoltageVariations!= null));
        }
        {
            Long theTempOvervoltage;
            theTempOvervoltage = this.getTempOvervoltage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tempOvervoltage", theTempOvervoltage), currentHashCode, theTempOvervoltage, (this.tempOvervoltage!= null));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public ElectricPowerQualitySummary withFlickerPlt(Long value) {
        setFlickerPlt(value);
        return this;
    }

    public ElectricPowerQualitySummary withFlickerPst(Long value) {
        setFlickerPst(value);
        return this;
    }

    public ElectricPowerQualitySummary withHarmonicVoltage(Long value) {
        setHarmonicVoltage(value);
        return this;
    }

    public ElectricPowerQualitySummary withLongInterruptions(Long value) {
        setLongInterruptions(value);
        return this;
    }

    public ElectricPowerQualitySummary withMainsVoltage(Long value) {
        setMainsVoltage(value);
        return this;
    }

    public ElectricPowerQualitySummary withMeasurementProtocol(Short value) {
        setMeasurementProtocol(value);
        return this;
    }

    public ElectricPowerQualitySummary withPowerFrequency(Long value) {
        setPowerFrequency(value);
        return this;
    }

    public ElectricPowerQualitySummary withRapidVoltageChanges(Long value) {
        setRapidVoltageChanges(value);
        return this;
    }

    public ElectricPowerQualitySummary withShortInterruptions(Long value) {
        setShortInterruptions(value);
        return this;
    }

    public ElectricPowerQualitySummary withSummaryInterval(DateTimeInterval value) {
        setSummaryInterval(value);
        return this;
    }

    public ElectricPowerQualitySummary withSupplyVoltageDips(Long value) {
        setSupplyVoltageDips(value);
        return this;
    }

    public ElectricPowerQualitySummary withSupplyVoltageImbalance(Long value) {
        setSupplyVoltageImbalance(value);
        return this;
    }

    public ElectricPowerQualitySummary withSupplyVoltageVariations(Long value) {
        setSupplyVoltageVariations(value);
        return this;
    }

    public ElectricPowerQualitySummary withTempOvervoltage(Long value) {
        setTempOvervoltage(value);
        return this;
    }

    @Override
    public ElectricPowerQualitySummary withBatchItemInfo(BatchItemInfo value) {
        setBatchItemInfo(value);
        return this;
    }

    @Override
    public ElectricPowerQualitySummary withExtensions(java.lang.Object... values) {
        if (values!= null) {
            for (java.lang.Object value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ElectricPowerQualitySummary withExtensions(Collection<java.lang.Object> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

}
